@using System.Text

@model LitProRead.ViewModels.StudentFormViewModel
 
@{
    var currStudentId2 = 0;
}

@section CssImport
{
    <style>
        .child-opener-image
        {
            cursor: pointer;
        }
        .child-opener-image-column
        {
            text-align: center;
        }
        .jtable-dialog-form
        {
            min-width: 220px;
        }
        .jtable-dialog-form input[type="text"]
        {
            min-width: 200px;
        }
        .jtable-input-readonly
        {
            background-color:lightgray;
        }
    </style>

    <link href="@Url.Content("~/Scripts/validationEngine/validationEngine.jquery.css")" rel="stylesheet" type="text/css" />
}
@section JavascriptImport
{
    <script type="text/javascript" src="@Url.Content("~/Scripts/validationEngine/jquery.validationEngine.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/validationEngine/jquery.validationEngine-en.js")"></script>
}  

<table>
    <colgroup>
            <col style="width:13%;"/>
            <col style="width:15%;"/>
            <col style="width:18%;"/>
            <col style="width:23%;"/>
            <col style="width:13%;"/>
            <col style="width:18%;"/>
    </colgroup>

    @*
    <tr>
        @for (int i = 0; i < 6; i++)
        {
            if (i % 2 == 0)
            {
                <td style="background-color:red"></td>
            }
            else
            {
                <td style="background-color:yellow"></td>
            }
        }
    </tr>
    *@

    <tr>
        <td colspan="4" style="text-align: left; color: blue">
            @Html.LabelForModel(Model.CurrentStudent.FirstName)
            @*
            &nbsp;&nbsp;@Html.LabelFor(m => m.CurrentStudent.LastName)
            *@
        </td>
    </tr>

    <tr><td colspan="6"><hr /></td></tr>

    <tr>
        <td>
            @Html.Label("Choose Tutor")
        </td>
        <td>
            @Html.TextBoxFor(m => m.TutorNameID, new { id = "TutorNameList" }) 
        </td>

        
            @*
        <td colspan="4" style="text-align:right">
            <button type="button" id="studentMatchTPrint">Print This</button>
            <button type="button" id="studentMatchTViewStatusChange">View Status Change</button>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

            <button type="button" id="studentMatchTAdd">Add</button>
            <button type="button" id="studentMatchTEdit">Edit</button>
            <button type="button" id="studentMatchTDelete">Delete</button>
                <input type="submit" value="Save" />

        </td>
            *@       
    </tr>
    <tr><td colspan="6"><hr /></td></tr>
</table>

<div id="Student-Matching-S">
</div>

<script type="text/javascript">

    $(document).ready(function () {

        $('#Student-Matching-S').jtable({
            title: 'Matched Tutors',
            paging: true, //Enable paging
            sorting: true, //Enable sorting
            defaultSorting: 'Name ASC',
            //openChildAsAccordion: true, //Enable this line to show child tabes as accordion style
            actions: {
                listAction: '@Url.Action("MatchSList", "Student")',
                deleteAction: '@Url.Action("DeleteMatchS", "Student")',
                updateAction: '@Url.Action("UpdateMatchS", "Student")',
                createAction: '@Url.Action("CreateMatchS", "Student")'
            },
            fields: {
                UniqID: {
                    key: true,      //this is to be used in deletion action
                    title: 'UniqID',
                    list: true,
                    input: function (data) {
                            return '<input type="text" readonly class="jtable-input-readonly" name="UniqID" value="' + data.value + '"/>';
                        if (data.value) {
                        } else {
                            //nothing to worry about here for your situation, data.value is undefined so the else is for the create/add new record user interaction, create is false for your usage so this else is not needed but shown just so you know when it would be entered
                        }
                    },
                    width: '5%',
                    visibility: 'hidden'
                },
                SID: {
                    title: 'SID',
                    //key: true
                    //create: false,
                    //edit: false,
                    //list: false

                    //create: true,
                    //edit: true,
                    list: true,
                    input: function (data) {
                             return '<input type="text" readonly class="jtable-input-readonly" name="SID" value="' + data.value + '"/>';
                       if (data.value) {
                        } else {
                            //nothing to worry about here for your situation, data.value is undefined so the else is for the create/add new record user interaction, create is false for your usage so this else is not needed but shown just so you know when it would be entered
                        }
                    },
                    width: '5%',
                    visibility: 'hidden'
                },
                TID: {
                    title: 'TID',
                    //create: false,
                    //edit: false,
                    //list: false
                    list: true,
                    input: function (data) {
                            return '<input type="text" readonly class="jtable-input-readonly" name="TID" value="' + data.value + '"/>';
                        if (data.value) {
                        } else {
                            //nothing to worry about here for your situation, data.value is undefined so the else is for the create/add new record user interaction, create is false for your usage so this else is not needed but shown just so you know when it would be entered
                        }
                    },
                    width: '5%',
                    visibility: 'hidden'
                },

                //CHILD TABLE DEFINITION FOR "Pair Activity"
                PairActivity: {
                    title: '',
                    //showCloseButton: true,
                    //openChildAsAccordion: true, 
                    width: '8%',
                    //paging: true, 
                    sorting: false,
                    edit: false,
                    create: false,
                    listClass: 'child-opener-image-column',
                    display: function (studentData) {
                        //Create an image that will be used to open child table
                        var $img = $('<img class="child-opener-image" src="/Content/images/Misc/note.png" title="Edit pair activity" />');
                        //Open child table when user clicks the image
                        $img.click(function () {
                            $('#Student-Matching-S').jtable('openChildTable',
                                    $img.closest('tr'),
                                    {
                                        title: studentData.record.TutorLName,
                                        //showCloseButton: true,
                                        actions: {
                                            listAction: '@Url.Action("MatchSPairsList", "Student")',

                                            @*listAction: '@Url.Action("PhoneList")?StudentId=' + studentData.record.StudentId,*@
                                            deleteAction: '@Url.Action("DeleteMatchSPairs", "Student")',
                                            updateAction: '@Url.Action("UpdateMatchSPairs", "Student")',
                                            createAction: '@Url.Action("CreateMatchSPairs", "Student")'
                                        },
                                        fields: {
                                            UniqID: {
                                                key: true,
                                                type: 'hidden',
                                                defaultValue: studentData.UniqID
                                            },    
                                            PairHours: {
                                                type: 'hidden',
                                                defaultValue: studentData.PairHours
                                            },
                                            SID: {
                                                type: 'hidden',
                                                defaultValue: studentData.SID
                                            },
                                            TID: {
                                                type: 'hidden',
                                                defaultValue: studentData.TID
                                            },
                                            DateMet: {
                                                title: 'Date Met',
                                                //width: '10%',
                                                type: 'date',
                                                displayFormat: 'yy-mm-dd'
                                                //create: false,
                                                //edit: false
                                            },
                                            HoursMet: {
                                                title: 'Hours Met'
                                                //width: '5%'
                                            },
                                            ActivityID: {
                                                title: 'Activity',
                                                options: '@Url.Action("GetActivity", "Home")',
                                            }
                                        },
                                        formCreated: function (event, data) {
                                            if (data.formType == "create") {
                                                var v = studentData.record.UniqID;
                                                data.form.find('input[name="PairHours"]').val(v);
                                            }
                                            //data.form.validationEngine();
                                            //data.form.find('input[name="Name"]').addClass( 'validate[required]'); data.form.find('input[name="EmailAddress"]').addClass( 'validate[required,custom[email]]'); data.form.find('input[name="Password"]').addClass( 'validate[required]'); data.form.find('input[name="BirthDate"]').addClass( 'validate[required,custom[date]]'); data.form.find('input[name="Education"]').addClass( 'validate[required]'); data.form.validationEngine();             
                                        }
                                    },

                                    function (data) { //opened handler
                                        currStudentId2 = studentData.record.SID;
                                        data.childTable.jtable('load', { SID: studentData.record.SID, TID: studentData.record.TID });
                                    });
                        });
                        //Return image to show on the person row
                        return $img;
                    }
                },

                @*
                //CHILD TABLE DEFINITION FOR "EXAMS"

                Exams: {
                    title: '',
                    width: '5%',
                    sorting: false,
                    edit: false,
                    create: false,
                    listClass: 'child-opener-image-column',
                    display: function (studentData) {
                        //Create an image that will be used to open child table
                        var $img = $('<img class="child-opener-image" src="/Content/images/Misc/note.png" title="Edit exam results" />');
                        //Open child table when user clicks the image
                        $img.click(function () {
                            $('#StudentTableContainer').jtable('openChildTable',
                                    $img.closest('tr'), //Parent row
                                    {
                                    title: studentData.record.Name + ' - Exam Results',
                                    actions: {
                                        listAction: '@Url.Action("ExamList")?StudentId=' + studentData.record.StudentId,
                                        deleteAction: '@Url.Action("DeleteExam")',
                                        updateAction: '@Url.Action("UpdateExam")',
                                        createAction: '@Url.Action("CreateExam")'
                                    },
                                    fields: {
                                        StudentId: {
                                            type: 'hidden',
                                            defaultValue: studentData.record.StudentId
                                        },
                                        StudentExamId: {
                                            key: true,
                                            create: false,
                                            edit: false,
                                            list: false
                                        },
                                        CourseName: {
                                            title: 'Course name',
                                            width: '40%'
                                        },
                                        ExamDate: {
                                            title: 'Exam date',
                                            width: '30%',
                                            type: 'date',
                                            displayFormat: 'yy-mm-dd'
                                        },
                                        Degree: {
                                            title: 'Degree',
                                            width: '10%',
                                            options: ["AA", "BA", "BB", "CB", "CC", "DC", "DD", "FF"]
                                        }
                                    }
                                }, function (data) { //opened handler
                                    data.childTable.jtable('load');
                                });
                        });
                        //Return image to show on the person row
                        return $img;
                    }
                },
                  *@

                TutorLName: {
                    title: 'Tutor Name',
                    width: '10%',
                    //edit: false,
                    input: function (data) {
                        //data.record.TutorLName = $("#TutorNameList").val();
                        if (data.record) {
                            return '<input type="text" name="TutorLName" style="width:200px" value="' + data.record.TutorLName + '" />';
                        } else {
                            var tutorName = $("#TutorNameList").select2('data').text; //$("#TutorNameList").val();
                            //return '<input type="text" name="Name" style="width:200px" value="enter your name here" />';
                            return '<input type="text" name="TutorLName" style="width:200px" value="' + tutorName + '" />';
                        }
                    }
                },
                //TutorFName: {
                //    title: 'First Name',
                //    width: '10%'
                //},
                TStatusID: {
                    title: 'T-Status',
                    width: '10%',
                    options: '@Url.Action("GetStatus", "Home")',
                    list: true
                },
                PairStatusID: {
                    title: 'Pair Status',
                    width: '10%',
                    options: '@Url.Action("GetStatus", "Home")'
                },
                PairStatusDate: {
                    title: 'Status Date',
                    //width: '10%',
                    type: 'date',
                    displayFormat: 'yy/mm/dd',
                    list: false
                },
                PairProgram: {
                    title: 'Program',
                    width: '10%',
                    list: false
                },
                MatchDate: {
                    title: 'Match',
                   // width: '7%',
                    type: 'date',
                    displayFormat: 'yy/mm/dd',
                    list: false
                },
                DissolveDate: {
                    title: 'Dissolve',
                    //width: '7%',
                    type: 'date',
                    displayFormat: 'yy/mm/dd',
                    list: false
                },
                Comments: {
                    title: 'Comments',
                    width: '10%',
                    list: false
                },
                DateCreated: {
                    title: 'Date Created',
                    //width: '7%',
                    type: 'date',
                    displayFormat: 'yy/mm/dd',
                    list: true
                },
                DateModified: {
                    title: 'Date Modified',
                    //width: '7%',
                    type: 'date',
                    displayFormat: 'yy/mm/dd',
                    list: false
                },
                LastModifiedBy: {
                    title: 'Last Modified By',
                    //width: '10%',
                    list: false
                }

               @*
                EmailAddress: {
                    title: 'Email address',
                    list: false
                },
                Password: {
                    title: 'User Password',
                    type: 'password',
                    list: false
                },
                Gender: {
                    title: 'Gender',
                    width: '11%',
                    options: { 'M': 'Male', 'F': 'Female' }
                },
                CityId: {
                    title: 'City',
                    width: '12%',
                    options: '@Url.Action("GetCityOptions")'
                },
                MatchDate: {
                    title: 'Match Date',
                    width: '15%',
                    type: 'date',
                    displayFormat: 'yy/mm/dd'
                },
                Education: {
                    title: 'Education',
                    list: false,
                    type: 'radiobutton',
                    options: { '1': 'Primary school', '2': 'High school', '3': 'University' }
                },
                About: {
                    title: 'About this person',
                    type: 'textarea',
                    list: false
                },
                IsActive: {
                    title: 'Status',
                    width: '12%',
                    type: 'checkbox',
                    values: { 'false': 'Passive', 'true': 'Active' },
                    defaultValue: 'true'
                },
                RecordDate: {
                    title: 'Record date',
                    width: '15%',
                    type: 'date',
                    displayFormat: 'yy-mm-dd',
                    create: false,
                    edit: false,
                    sorting: false //This column is not sortable!
                }
                *@
            },      //fields

            formCreated: function (event, data) {
                if (data.formType == "create") {
                    var v = $("#TutorNameList").val();
                    data.form.find('input[name="TID"]').val(v);
                    v = $('#CurrentStudent_ID').val();
                    data.form.find('input[name="SID"]').val(v);

                    data.form.find('input[name="UniqID"]').val(0);
                }
                //data.form.validationEngine();
                //data.form.find('input[name="Name"]').addClass( 'validate[required]'); data.form.find('input[name="EmailAddress"]').addClass( 'validate[required,custom[email]]'); data.form.find('input[name="Password"]').addClass( 'validate[required]'); data.form.find('input[name="BirthDate"]').addClass( 'validate[required,custom[date]]'); data.form.find('input[name="Education"]').addClass( 'validate[required]'); data.form.validationEngine();             
            },

            //formSubmitting: function (event, data) {
            //    return data.form.validationEngine('validate');             
            //},
            
            formClosed: function (event, data) {
                //data.form.validationEngine('hide');
                //data.form.validationEngine('detach');
                //$('#Student-Matching-S').jtable('load', { SID: currentStudentId });
            }
        });

        //Load person list from server
        //$('#Student-Matching-S').jtable('load', { SID: 18 });

    });

</script>

    @*
<div id="Student-Matching-S">
    @using (Html.BeginForm("Edit", "Student", FormMethod.Post))
    { 
        @ *
        @Html.AntiForgeryToken()
            @Html.HiddenFor(x => Model.CurrentStudent.ID)
        * @
            
        @Html.ValidationSummary(true)

        @Html.HiddenFor(m => m.CurrentStudent.ID)

        
        <table>
            <colgroup>
                    <col style="width:13%;"/>
                    <col style="width:15%;"/>
                    <col style="width:18%;"/>
                    <col style="width:23%;"/>
                    <col style="width:13%;"/>
                    <col style="width:18%;"/>
            </colgroup>

            <tr>
                @for (int i = 0; i < 6; i++)
                {
                    if (i % 2 == 0)
                    {
                        <td style="background-color:red"></td>
                    }
                    else
                    {
                        <td style="background-color:yellow"></td>
                    }
                }
            </tr>


            <tr>
                <td colspan="4" style="text-align: left; color: blue">
                    @Html.LabelForModel(Model.CurrentStudent.FirstName)
                    @ *
                    &nbsp;&nbsp;@Html.LabelFor(m => m.CurrentStudent.LastName)
                    * @
                </td>
            </tr>

            <tr><td colspan="6"><hr /></td></tr>

            <tr>
                <td>
                    @Html.Label("Choose Tutor")
                </td>
                <td>
                    @Html.TextBoxFor(m => m.TutorNameID, new { id = "TutorNameList" }) 
                </td>
                <td colspan="4" style="text-align:right">
                    <button type="button" id="studentMatchTPrint">Print This</button>
                    <button type="button" id="studentMatchTViewStatusChange">View Status Change</button>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <button type="button" id="studentMatchTAdd">Add</button>
                    <button type="button" id="studentMatchTEdit">Edit</button>
                    <button type="button" id="studentMatchTDelete">Delete</button>
                        
                    <input type="submit" value="Save" />

                </td>
            </tr>
            <tr><td colspan="6"><hr /></td></tr>
            <tr>
                <td>
                    @Html.Label("Tutor Name")
                </td>
                <td>
                    @Html.TextBox("MatchT.CurrentStudent.FirstName", Model.CurrentStudent.FirstName, htmlAttributes: new { disabled = "disabled" }) 
                </td>
                <td>
                    @Html.TextBox("MatchT.CurrentStudent.LastName", Model.CurrentStudent.LastName, htmlAttributes: new { disabled = "disabled" }) 
                </td>
                <td style="text-align:right">T-Status&nbsp;&nbsp;
                    @Html.DropDownList("MatchT.CurrentStudent.S-Status", Model.AreaCodeList, string.Empty, new { style="width:60%" })  
                </td>
                <td style="text-align:right">Pair Status
                </td>
                <td>
                    @Html.DropDownList("MatchT.CurrentStudent.S-Status", Model.AreaCodeList, string.Empty, new { style="width:100%" })  
                </td>
            </tr>

            <tr>
                <td>
                    @Html.Label("Student Name")
                </td>
                <td>
                    @Html.TextBox("MatchT.CurrentStudent.FirstName", Model.CurrentStudent.FirstName, htmlAttributes: new { disabled = "disabled" }) 
                </td>
                <td>
                    @Html.TextBox("MatchT.CurrentStudent.LastName", Model.CurrentStudent.LastName, htmlAttributes: new { disabled = "disabled" }) 
                </td>
                <td style="text-align:right">S-Status&nbsp;&nbsp;
                    @Html.DropDownList("MatchT.CurrentStudent.S-Status", Model.AreaCodeList, string.Empty, new { style="width:60%" })  
                </td>
                <td style="text-align:right">Status Date
                </td>
                <td>
                    @Html.TextBoxFor(m => m.CurrentStudent.DOB, "{0:MM/dd/yyyy}", new { @class = "datefield", style = "width:7em" })
                </td>
            </tr>

            <tr>
                <td>
                    @Html.Label("Pair Activity")
                </td>
                <td colspan="3">
                </td>
                <td style="text-align:right">Pair Program
                </td>
                <td>
                    @Html.DropDownList("MatchT.CurrentStudent.S-Status", Model.AreaCodeList, string.Empty, new { style="width:100%" })  
                </td>
            </tr>

            <tr>
                <td colspan="4">
                </td>
                <td style="text-align:right">Match Date
                </td>
                <td>
                    @Html.TextBoxFor(m => m.CurrentStudent.DOB, "{0:MM/dd/yyyy}", new { @class = "datefield", style = "width:7em" })
                </td>
            </tr>

            <tr>
                <td colspan="4">
                </td>
                <td style="text-align:right">Dissolve Date
                </td>
                <td>
                    @Html.TextBoxFor(m => m.CurrentStudent.DOB, "{0:MM/dd/yyyy}", new { @class = "datefield", style = "width:7em" })
                </td>
            </tr>

            <tr>
                <td colspan="4">
                </td>
                <td style="text-align:right">Month of Service
                </td>
                <td>
                </td>
            </tr>

            <tr>
                <td colspan="4">
                </td>
                <td style="text-align:right">Comments
                </td>
            </tr>
        </table>
    } @ * form * @
</div>
    *@

@*
     <script type="text/javascript">
        function loadUIs() {
            var pageSize = 20;
            $("#TutorNameList").select2(
            {
                placeholder: '',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: '@Url.Action("GetTutorsName", "Home")',
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            byLastName: false
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
            });

            $("#TutorNameList")
                .on("change", function (e) {
                    //currentTutorId = e.val;
                    //alert("Tutor Last Name: " + currentTutorId);
                })
        }
    </script>


@section scripts
{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/select2.css")"/>
    <script type="text/javascript" src="@Url.Content("~/Scripts/select2.js")"></script>

    <script>
        $(document).ready(function () {
            $("#TutorNameList").select2(
            {
                placeholder: '',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: '@Url.Action("GetTutorsName", "Home")',
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            byLastName: true
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
            });

            $("#TutorNameList")
                .on("change", function (e) {
                    //currentTutorId = e.val;
                    //alert("Tutor Last Name: " + currentTutorId);
                })
        });
    </script>
}
*@