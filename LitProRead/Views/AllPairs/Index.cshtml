@model LitProRead.ViewModels.AllPairsFormViewModel
   
<style>
    .select2-container {
        width:250px;
    }
</style>

<div style="font-weight: bold;">
A L L&nbsp;&nbsp;&nbsp;P A I R S
</div>

<div>
    @using (Html.BeginForm("Edit", "AllPairs", FormMethod.Post))
    { 
        @Html.HiddenFor(m => Model.CurrentPair.UniqID)
        @Html.HiddenFor(m => Model.EditMode)
        @Html.HiddenFor(m => Model.CurrentRecordIndex)
        @Html.HiddenFor(m => Model.RecordsCnt)
        @Html.HiddenFor(m => Model.PairByTutor)

        <table>
            <colgroup>
                @*
                    <col style="width:25%;"/>
                    <col style="width:15%;"/>
                    <col style="width:25%;"/>
                    <col style="width:15%;"/>
                    <col style="width:20%;"/>
                *@
                    <col style="width:25%;"/>
                    <col style="width:25%;"/>
                    <col style="width:25%;"/>
                    <col style="width:25%;"/>
            </colgroup>
            @*
            <tr>
                @for (int i = 0; i < 4; i++)
                {
                    if (i % 2 == 0)
                    {
                        <td style="background-color:red"></td>
                    }
                    else
                    {
                        <td style="background-color:yellow"></td>
                    }
                }
            </tr>
            *@
            <tr>
                <td colspan="4">
                    <hr>
                </td>
            </tr>

            <tr>
                <td style="text-align:right; border:0 none;">Find Tutor
                </td>
                <td style="text-align:left; border:0 none;">
                    @Html.TextBoxFor(m => m.TutorID, new { id = "TutorList", style = "width:20em" }) 
                </td>
                <td style="text-align:right; border:0 none;">Find Student
                </td>
                <td style="text-align:left; border:0 none;">
                    @Html.TextBoxFor(m => m.StudentID, new { id = "StudentList", style = "width:20em" }) 

                </td>
            </tr>

            <tr>
                <td colspan="5" style="text-align:center">
                    <button type="button" id="pairEdit">Edit</button>
                    @*<button type="button" id="pairDelete">Delete</button>                       *@
                    <input type="submit"  id="pairSave" value="Save" />
                    <button type="button" id="pairCancel" onclick='cancelRecord()'>Cancel</button> 

                    <button type="button" id="printpair">Print</button>

                </td>
            </tr>
        </table>
        
        <table>
            <colgroup>
                    <col style="width:15%;"/>
                    <col style="width:20%;"/>
                    <col style="width:35%;"/>
                    <col style="width:15%;"/>
                    <col style="width:15%;"/>
            </colgroup>
        @*
            <tr>
                <td colspan="5">
                    <hr>
                </td>
            </tr>
        *@
 
            <tr>
                <td>
                    @Html.Label("Tutor Name")
                </td>
                <td>
                    @Html.TextBoxFor(m => Model.CurrentPair.TutorFName, new { style = "width:25em" })
                </td>
                <td>
                    @Html.TextBoxFor(m => Model.CurrentPair.TutorLName, new { style = "width:25em" })
                </td>
                <td>
                    @Html.Label("Tutor Status")
                </td>
                <td colspan="2">
                    @Html.DropDownListFor(m => Model.CurrentPair.TutorStatus, Model.StatusList, string.Empty, new { style = "width:100%" })  
                </td>
            </tr>

            <tr>
                <td>
                    @Html.Label("Student Name")
                </td>
                <td>
                    @Html.TextBoxFor(m => Model.CurrentPair.StudentFName, new { style = "width:25em" })
                </td>
                <td>
                    @Html.TextBoxFor(m => Model.CurrentPair.StudentLName, new { style = "width:25em" })
                </td>
                <td>
                    @Html.Label("Student Status")
                </td>
                <td colspan="2">
                    @Html.DropDownListFor(m => Model.CurrentPair.StudentStatus, Model.StatusList, string.Empty, new { style = "width:100%" })  
                </td>
            </tr>

            <tr>
                <td>
                    @Html.Label("Pair Status")
                </td>
                <td>
                    @Html.DropDownListFor(m => Model.CurrentPair.PairStatus, Model.StatusList, string.Empty, new { style = "width:20em" })  
                </td>
                <td>Status Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        @Html.TextBoxFor(m => m.CurrentPair.PairStatusDate, "{0:MM/dd/yyyy}", new { @class = "datefield", style = "width:8em" })
                </td>
                <td>
                    @Html.Label("Pair Program")
                </td>
                <td colspan="2">
                    @Html.DropDownListFor(m => Model.CurrentPair.PairProgram, Model.ProgramList, string.Empty, new { style = "width:100%" })  
                </td>
            </tr>

            <tr>
                <td>
                    @Html.Label("Match Date")
                </td>
                <td>
                    @Html.TextBoxFor(m => m.CurrentPair.MatchDate, "{0:MM/dd/yyyy}", new { @class = "datefield", style = "width:8em" })
                </td>
                <td>Dissolve Date&nbsp;&nbsp;&nbsp;
                    @Html.TextBoxFor(m => m.CurrentPair.DissolveDate, "{0:MM/dd/yyyy}", new { @class = "datefield", style = "width:8em" })
                </td>
                <td>
                    @Html.Label("Months of Service")
                </td>
                <td>
                    @Html.TextBoxFor(m => m.CurrentPair.MonthsOfService, new { style = "width:10%", disabled = "disabled" })
                </td>
            </tr>

            <tr>
                <td>
                    @Html.Label("Comments")
                </td>
                <td colspan="4">
                    @Html.TextAreaFor(m => m.CurrentPair.Comments, new { style = "width:100%" })
                </td>
            </tr>

            <tr>
                <td colspan="5">
                    <div id="AllPairsHours">
                    </div>
                </td>
            </tr>

            <tr>
                <td colspan="3">
                    <div>
                        @Html.Label("Total Hours Met")
                    </div>
                </td>
                <td>
                    @Html.TextBoxFor(m => m.CurrentPair.TotalHoursMet, new { style = "width:3em", disabled = "disabled" })
                </td>
            </tr>

            <hr>
        </table>            

    }
        
<hr>
</div>



<div >
    <img id="pairFirst" src="~/Images/firstRec.jpg" onClick='recordNav("first")'/>
    <img id="pairPrev" src="~/Images/prevRec.jpg" onClick='recordNav("prev")'/>
    <input class="pagingControl" type="text" id="pairPages" style="width:30px" />
    <input class="pagingControl" type="text" id="pairPagesLabel" style="width:80px; background-color:lightgrey" disabled="disabled"  />
    <img id="pairNext" src="~/Images/nextRec.jpg" onClick='recordNav("next")'/>
    <img id="pairLast" src="~/Images/lastRec.jpg" onClick='recordNav("last")'/>

</div>

@section scripts
{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/select2.css")"/>
    <link rel="stylesheet" media="screen" href="@Url.Content("~/Content/superfish.css")"/>
    <script type="text/javascript" src="@Url.Content("~/Scripts/select2.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/toDictionary.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.serializeJSON.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/superfish.js")"</script>

    @* 1/30/14 for some reason, if they are not here then the select2() won't work *@
    <script>
    </script>

    <script type="text/javascript">
        function recordNav(direction) {
            $.fn.handlePairRecordNavigation(direction);
        }

        function cancelRecord() {
            $.fn.handleCancelRecord();
        }

        $(document).ready(function () {
            var pageSize = 20;
            var uniqId = $('#CurrentPair_UniqID').val();

            $(".datefield").datepicker();

            $('#pairPages').val(@Html.Raw(Json.Encode(Model.CurrentRecordIndex)));

            var pagesLabel = "of " + $('#RecordsCnt').val() + " Records";
            $('#pairPagesLabel').val(pagesLabel);

            var mode = @Html.Raw(Json.Encode(Model.EditMode))
            $('#EditMode').val(mode);

            if (mode == "edit" || mode == "add") {
                $("input").addClass("editmode");
                $("textarea").addClass("editmode");
                $("select").addClass("editmode");
            }
            else {
                $("input").prop('disabled', true);
                $("textarea").prop('disabled', true);
                $("select").prop('disabled', true);

                $('#pairDelete').prop('disabled', true);
                $('#pairSave').prop('disabled', true);
            }

            // always enable these controls
            $("#pairPages").prop('disabled', false);
            $('#TutorList').prop('disabled', false);
            $('#StudentList').prop('disabled', false);

            $.fn.handlePairRecordNavigation = function (direction) {
                // enable
                var navUrl = '@Url.Content("~/AllPairs/NextPair")';
                if (direction == "prev") {
                    navUrl = '@Url.Content("~/AllPairs/PrevPair")';
                }
                else
                    if (direction == "first") {
                        navUrl = '@Url.Content("~/AllPairs/FirstPair")';
                        }
                        else
                            if (direction == "last") {
                                navUrl = '@Url.Content("~/AllPairs/LastPair")';
                            }
                var id = $('#CurrentPair_UniqID').val();
                $.ajax({
                    url: navUrl,
                    type: 'get',
                    cache: false,
                    async: false,      // IMPORTANT to have this statement. If not the Home/Index will be called and the result is we'll have an empty form.
                    data: { currPairId: id },
                }).done(function (data) {
                    // alert('done');
                }).complete(function () {
                    // alert("complete");
                }).success(function (data) {
                    //alert('success');

                    //$('#EditMode').val("edit");
                    //alert( $('#EditMode').val());

                    $.fn.populatePairForm(data);

                    // should update the new pair id

                    //synch the search tutor profiles boxes
                    @*
                    var pairByTutor = $("#PairByTutor").val();
                    if (pairByTutor == "True" || pairByTutor == "true") {
                        // these 2 have to be here, before the call to .select2() since this will trigger the select2's initSelection() which relies on the value of SelectedLastNameId and of SelectedLastName
                      //$('#SelectedLastNameId').val(data.CurrentTutor.ID);
                        var name = data.CurrentPair.TutorLName + ", " + data.CurrentPair.TutorFName;
                      //$('#SelectedLastName').val(name);

                      $("#TutorList").select2("val", name);
                   }
                   else {
                      // these 2 have to be here, before the call to .select2() since this will trigger the select2's initSelection() which relies on the value of SelectedFirstNameId and of SelectedFirstName
                      //$('#SelectedFirstNameId').val(data.CurrentTutor.ID);
                      //var name = data.CurrentTutor.FirstName + " " + data.CurrentTutor.LastName;
                      //$('#SelectedFirstName').val(name);

                      //$("#TutorListFirstName").select2("val", name);
                   }
                    *@

                   // MUST reload the date picker in order for it to work AFTER coming back from calling the Partial View.
                   $(".datefield").datepicker();
                }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                    var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                    alert("There was an error calling editpair: " + errorMessage);
                });
            };

            // --- CANCEL --- 
            //$('#pairCancel').click(function () {
            $.fn.handleCancelRecord = function () {
                $('#EditMode').val("view");

                $("input").prop('disabled', true);
                $("textarea").prop('disabled', true);
                $("select").prop('disabled', true);

                $('#pairDelete').prop('disabled', true);
                $('#pairSave').prop('disabled', true);
                $('#pairAdd').prop('disabled', false);
                $('#pairEdit').prop('disabled', false);

                // always enable the Last Name & First Name dropboxes for search + "active only" checkbox
                //$('#TuTorList').prop('disabled', false);
                //$('#StudentList').prop('disabled', false);

                $("input").removeClass("editmode");
                $("textarea").removeClass("editmode");
                $("select").removeClass("editmode");

                $("#pairPages").prop('disabled', false);
            };


            // --- EDIT --- 
            $('#pairEdit').click(function () {
                var pairId = $('#CurrentPair_UniqID').val();
                $.fn.handleEditRecord(pairId, "edit");
            });

            $('#viewStatusChanges').click(function (event) {
                //alert("viewStatusChanges");
                var pairId = $('#CurrentPair_ID').val();
                if (pairId > 0) {
                    var url = '@Url.Action("AuditTrailThis", "Reports", new { id = "_IdVal_" })';
                    url = url.replace("_IdVal_", "T" + pairId);
                    window.open(url, '_blank'); // <- This is what makes it open in a new window.
                };

            });

            $.fn.handleEditRecord = function (recId, mode) {
                $('#EditMode').val(mode);

                if (mode == "edit") {
                    $("input").prop('disabled', false);
                    $("textarea").prop('disabled', false);
                    $("select").prop('disabled', false);

                    $("input").addClass("editmode");
                    $("textarea").addClass("editmode");
                    $("select").addClass("editmode");

                    $("#CurrentPair_TotalHoursMet").prop('disabled', true);
                    $("#CurrentPair_MonthsOfService").prop('disabled', true);
                }

                $.ajax({
                    url: '@Url.Content("~/AllPairs/Edit")',
                    type: 'get',
                    cache: false,
                    async: false,      // IMPORTANT to have this statement. If not the Home/Index will be called and the result is we'll have an empty form.
                    data: { id: recId },
                }).done(function (data) {
                    // alert('done');
                }).complete(function () {
                    // alert("complete");
                }).success(function (data) {
                    //alert('success');
                    //$('#EditMode').val(mode);   //"edit");
                    //alert( $('#EditMode').val());

                    $.fn.populatePairForm(data);


                    // MUST reload the date picker in order for it to work AFTER coming back from calling the Partial View.
                    $(".datefield").datepicker();

                    //alert($('#CurrentPair_ID').val);

                }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                    var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                    alert("There was an error calling editpair: " + errorMessage);
                });
            };

            $.fn.populatePairForm = function (data) {
                if (data == "") {
                    var recCnt = @Html.Raw(Json.Encode(Model.RecordsCnt + 1))
                        $('#CurrentRecordIndex').val(recCnt);

                    $('#pairPages').val(recCnt);
                    var pagesLabel = "of " + recCnt + " Records";
                    $('#pairPagesLabel').val(pagesLabel);

                    $('#AllPairsHours').jtable('load', { UniqID: 0 });

                    //$('#CurrentTutor_ID').val(data);

                    $('#CurrentPair_TutorLName').val(data);
                    $('#CurrentPair_TutorFName').val(data);
                    $('#CurrentPair_TutorStatus').val(data);

                    $('#CurrentPair_StudentLName').val(data);
                    $('#CurrentPair_StudentFName').val(data);
                    $('#CurrentPair_StudentStatus').val(data);

                    $('#CurrentPair_PairProgram').val(data);
                    $('#CurrentPair_PairStatus').val(data);

                    var fmt = "";
                    $('#CurrentPair_PairStatusDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
                    $('#CurrentPair_MatchDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
                    $('#CurrentPair_DissolveDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                    $('#CurrentPair_Comments').val(data);
                    $('#CurrentPair_TotalHoursMet').val(data);
                }
                else {
                    $('#CurrentRecordIndex').val(data.CurrentRecordIndex);
                    $('#pairPages').val(data.CurrentRecordIndex);

                    $('#AllPairsHours').jtable('load', { UniqID: data.CurrentPair.UniqID });

                    $('#CurrentPair_UniqID').val(data.CurrentPair.UniqID);

                    $('#CurrentPair_TutorLName').val(data.CurrentPair.TutorLName);
                    $('#CurrentPair_TutorFName').val(data.CurrentPair.TutorFName);
                    $('#CurrentPair_TutorStatus').val(data.CurrentPair.TutorStatus);

                    $('#CurrentPair_StudentLName').val(data.CurrentPair.StudentLName);
                    $('#CurrentPair_StudentFName').val(data.CurrentPair.StudentFName);
                    $('#CurrentPair_StudentStatus').val(data.CurrentPair.StudentStatus);

                    $('#CurrentPair_PairProgram').val(data.CurrentPair.PairProgram);
                    $('#CurrentPair_PairStatus').val(data.CurrentPair.PairStatus);

                    var fmt = $.fn.getFormattedDate(data.CurrentPair.PairStatusDate);
                    $('#CurrentPair_PairStatusDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                    fmt = $.fn.getFormattedDate(data.CurrentPair.MatchDate);
                    $('#CurrentPair_MatchDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                    fmt = $.fn.getFormattedDate(data.CurrentPair.DissolveDate);
                    $('#CurrentPair_DissolveDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                    $('#CurrentPair_Comments').val(data.CurrentPair.Comments);
                    $('#CurrentPair_TotalHoursMet').val(data.CurrentPair.TotalHoursMet);
                }

                var pairByTutor = $("#PairByTutor").val();
                //if (pairByTutor == "True" || pairByTutor == "true") {
                    // these 2 have to be here, before the call to .select2() since this will trigger the select2's initSelection() which relies on the value of SelectedLastNameId and of SelectedLastName
                    //$('#SelectedLastNameId').val(data.CurrentTutor.ID);
                    var tutor = data.CurrentPair.TutorLName + ", " + data.CurrentPair.TutorFName;
                    //$('#SelectedLastName').val(name);

                    $("#TutorList").select2("val", tutor);
                //}
                //else {
                    // these 2 have to be here, before the call to .select2() since this will trigger the select2's initSelection() which relies on the value of SelectedFirstNameId and of SelectedFirstName
                    //$('#SelectedFirstNameId').val(data.CurrentTutor.ID);
                    var student = data.CurrentPair.StudentLName + ", " + data.CurrentPair.StudentFName;
                    //$('#SelectedFirstName').val(name);

                    $("#StudentList").select2("val", student);
                //}
            };

            $('#pairPages').keypress(function (event) {
                if (event.keyCode == 13) {
                    //alert($('#pairPages').val());
                    $.ajax({
                        url: '@Url.Content("~/AllPairs/PairByRecIndex")',
                        type: 'get',
                        cache: false,
                        async: false,      // IMPORTANT to have this statement. If not the Home/Index will be called and the result is we'll have an empty form.
                        data: { recIndex: $('#pairPages').val() },
                    }).done(function (data) {
                        // alert('done');
                    }).complete(function () {
                        // alert("complete");
                    }).success(function (data) {
                        //alert('success');
                        //$('#EditMode').val("edit");

                        $.fn.populatePairForm(data);

                        //synch the search student profiles boxes
//                        var byLastName = $("#ByLastName").val();
//                        if (byLastName == "True" || byLastName == "true") {
//                            var name = data.CurrentTutor.LastName + ", " + data.CurrentTutor.FirstName;
//                            $("#TutorListLastName").select2("val", name);
//                            $('#SelectedLastNameId').val(data.CurrentTutor.ID);
//                            $('#SelectedLastName').val(name);
//                        }
//                        else {
//                            var name = data.CurrentTutor.FirstName + " " + data.CurrentTutor.LastName;
//                            $("#TutorListFirstName").select2("val", name);
//                            $('#SelectedFirstNameId').val(data.CurrentTutor.ID);
//                            $('#SelectedFirstName').val(name);
//                       }

                        // MUST reload the date picker in order for it to work AFTER coming back from calling the Partial View.
                        $(".datefield").datepicker();
                    }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                        var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                        alert("There was an error calling editpair: " + errorMessage);
                    });
                }

            });


            $('#AllPairsHours').jtable({
                //title: 'Pair Hours',
                paging: true, //Enable paging
                //pageSize: 5,
                sorting: true, //Enable sorting
                defaultSorting: 'DateCreated DESC',
                //openChildAsAccordion: true, //Enable this line to show child tabes as accordion style
                messages: {
                    addNewRecord: 'Add New Matched Student'
                },
                actions: {
                    //deleteAction: '@Url.Action("DeleteMatchT", "Tutor")',
                    //updateAction: '@Url.Action("UpdateMatchT", "Tutor")',
                    //createAction: '@Url.Action("CreateMatchT", "Tutor")',
                    listAction: '@Url.Action("PairHours", "AllPairs")'
                },

                fields: {
                    UniqID: {
                        key: true,      
                        title: 'UniqID',
                        list: true,
                        input: function (data) {
                            return '<input type="text" readonly class="jtable-input-readonly" name="UniqID" value="' + data.value + '"/>';
                            if (data.value) {
                            } else {
                                //nothing to worry about here for your situation, data.value is undefined so the else is for the create/add new record user interaction, create is false for your usage so this else is not needed but shown just so you know when it would be entered
                            }
                        },
                        width: '5%',
                        visibility: 'hidden'
                    },
                    TID: {
                        title: 'TID',
                        //key: true
                        //create: false,
                        //edit: false,
                        //list: false

                        //create: true,
                        //edit: true,
                        list: true,
                        input: function (data) {
                            return '<input type="text" readonly class="jtable-input-readonly" name="TID" value="' + data.value + '"/>';
                            if (data.value) {
                            } else {
                                //nothing to worry about here for your situation, data.value is undefined so the else is for the create/add new record user interaction, create is false for your usage so this else is not needed but shown just so you know when it would be entered
                            }
                        },
                        width: '5%',
                        visibility: 'hidden'
                    },
                    SID: {
                        title: 'SID',
                        //create: false,
                        //edit: false,
                        //list: false
                        list: true,
                        input: function (data) {
                            return '<input type="text" readonly class="jtable-input-readonly" name="SID" value="' + data.value + '"/>';
                            if (data.value) {
                            } else {
                                //nothing to worry about here for your situation, data.value is undefined so the else is for the create/add new record user interaction, create is false for your usage so this else is not needed but shown just so you know when it would be entered
                            }
                        },
                        width: '5%',
                        visibility: 'hidden'
                    },

                    @*
                    PairHours: {
                        type: 'hidden',
                        defaultValue: tutorData.PairHours
                    },
                    SID: {
                        type: 'hidden',
                        defaultValue: tutorData.SID
                    },
                    TID: {
                        type: 'hidden',
                        defaultValue: tutorData.TID
                    },
                    *@

                    ActivityID: {
                        title: 'Activity',
                        sorting: false,
                        options: '@Url.Action("GetActivity", "Home")',
                    },
                    DateMet: {
                        title: 'Date Met',
                        //width: '10%',
                        type: 'date',
                        sorting: false,
                        displayFormat: 'yy-mm-dd'
                        //create: false,
                        //edit: false
                    },
                    HoursMet: {
                        title: 'Hours Met',
                        sorting: false
                        //width: '5%'
                    },
                },      // fields
                
                @*
                formCreated: function (event, data) {
                    if (data.formType == "create") {
                        var v = tutorData.record.UniqID;
                        data.form.find('input[name="PairHours"]').val(v);
                    }
                },
                *@
            });


            $.fn.getFormattedDate = function (date) {
                if (date == null)
                    return null;
                var dt = eval("new " + date.toString().replace(/[\\/]/g, ""));
                return new Date(dt);
            };

            $('#AllPairsHours').jtable('load', { UniqID: uniqId });

            $("#TutorList").select2(
            {
                //placeholder: 'Enter last name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: '@Url.Action("GetAllPairsForTutors", "Home")',
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected movie's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the movie name is shown preselected
                    if (mode == "view") {
                        var id = element.val();
                        //var id2 = $("#StudentListLastName").select2('data').id;
                        //var text2 = $("#StudentListLastName").select2('data').text;

                        //var text = element.data('text');
                        var text = $('#CurrentPair_TutorLName').val() + ", " + $('#CurrentPair_TutorFName').val();
                        var data = { id: id, text: text };
                        callback(data);
                    }
                    else {
                        var id = $('#SelectedLastNameId').val();
                        var text = $('#SelectedLastName').val();
                        var data = { id: id, text: text };
                        callback(data);
                    }
                }
            });     // TutorList

            $("#TutorList").on("change", function (e) {
                $("#PairByTutor").val(true);

                var text = $("#TutorList").select2('data').text;
                var id = $("#TutorList").select2('data').id;
                $("#SelectedLastName").val(text);
                $("#SelectedLastNameId").val(id);


                var pairId = e.val;
                if (pairId > 0) {
                    $.fn.handleEditRecord(pairId, mode);
                    // enable "Edit" button
                    $('#pairEdit').prop('disabled', false);
                    $('#pairDelete').prop('disabled', false);
                    if (mode == "view") {
                        $('#pairSave').prop('disabled', true);
                    }
                    else {
                        $('#pairSave').prop('disabled', false);
                    }
                }
            });

            $("#StudentList").select2(
            {
                //placeholder: 'Enter last name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: '@Url.Action("GetAllPairsForStudents", "Home")',
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected movie's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the movie name is shown preselected
                    if (mode == "view") {
                        var id = element.val();
                        //var id2 = $("#StudentListLastName").select2('data').id;
                        //var text2 = $("#StudentListLastName").select2('data').text;

                        //var text = element.data('text');
                        var text = $('#CurrentPair_StudentLName').val() + ", " + $('#CurrentPair_StudentFName').val();
                        var data = { id: id, text: text };
                        callback(data);
                    }
                    else {
                        var id = $('#SelectedLastNameId').val();
                        var text = $('#SelectedLastName').val();
                        var data = { id: id, text: text };
                        callback(data);
                    }
                }
            });     // StudentList

            $("#StudentList").on("change", function (e) {
                $("#PairByTutor").val(false);

                var text = $("#StudentList").select2('data').text;
                var id = $("#StudentList").select2('data').id;
                //$("#SelectedLastName").val(text);
                //$("#SelectedLastNameId").val(id);


                var pairId = e.val;
                if (pairId > 0) {
                    $.fn.handleEditRecord(pairId, mode);
                    // enable "Edit" button
                    $('#pairEdit').prop('disabled', false);
                    $('#pairDelete').prop('disabled', false);
                    if (mode == "view") {
                        $('#pairSave').prop('disabled', true);
                    }
                    else {
                        $('#pairSave').prop('disabled', false);
                    }
                }
            });
        });  // $(document).ready()

    </script>
}