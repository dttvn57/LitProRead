@model LitProRead.ViewModels.StudentFormViewModel

@{
    ViewBag.Title = "Home Page";
    var currentStudentId = 0;
    if (Model != null && Model.CurrentStudent != null)
    {
        currentStudentId = Model.CurrentStudent.ID;
    }
    var currentTutortId = 0;
    var editMode = "del";
}

<style>
    .select2-container {
        width:250px;
    }
</style>

<div style="font-weight: bold;">
S T U D E N T S
</div>

@*
<div id="tabs">
*@
    @* ----------------------------------------------------- *@
    <div id="tabs-Students">

        @*
        <form id="studentform" method="post" action="@Url.Action("Forms")" 
            data-otf-ajax="true" data-otf-target="#Student-General">
        <form id="studentform">

        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "studentform" }))
        *@
        @*
        @using (Ajax.BeginForm("Edit", "Home", new AjaxOptions { HttpMethod = "POST", OnComplete="_EditComplete", UpdateTargetId = "divStudent", InsertionMode = InsertionMode.Replace }))
        *@

        @using (Html.BeginForm("Edit", "Student", FormMethod.Post))
        { 
            @*
            @Html.AntiForgeryToken()
          *@
              @Html.HiddenFor(x => Model.CurrentStudent.ID)
              @Html.HiddenFor(x => Model.EditMode)
            
            @Html.ValidationSummary(true)

            
            <table>
                <colgroup>
                        <col style="width:20%;"/>
                        <col style="width:20%;"/>
                        <col style="width:20%;"/>
                        <col style="width:20%;"/>
                        <col style="width:20%;"/>
                </colgroup>
@*
                <tr>
                    <td>
                                    @Html.TextBoxFor(x => x.CurrentStudent.ID)

                    </td>
                </tr>
*@
                <tr>
                    <td>
                        @Html.CheckBox("ActiveOnly", false)Active Only
                    </td>
                    <td style="text-align:right; border:0 none;">Last Name
                    </td>
                    <td style="text-align:left; border:0 none;">
                        @*
                         <input id="StudentListLastName" type="hidden" style="width: 250px"/>
                         @Html.ValidationMessageFor(x => Model.StudentListLastName)
                        @Html.ValidationMessageFor(x => Model.StudentListFirstName)

                        @Html.ValidationMessageFor(m => m.StudentLastNameID)
                        @Html.DropDownListFor(x => x.StudentListLastName, Model.StudentListLastName, string.Empty, new { style = "width: 250px;", @onchange = "onStudentLastNameChange(this.options[this.selectedIndex].value);" })
                      *@
                        @Html.TextBoxFor(m => m.StudentLastNameID, new { id = "StudentListLastName" }) 

                    </td>
                    <td style="text-align:right; border:0 none;">First Name
                    </td>
                    <td style="text-align:left; border:0 none;">


                        @Html.TextBoxFor(m => m.StudentFirstNameID, htmlAttributes: new { id = "StudentListFirstName" }) 
                        @*
                        @Html.DropDownListFor(x => x.StudentFirstNameID, Model.StudentListFirstName, string.Empty, htmlAttributes: new { style = "width: 250px;", @onchange = "onStudentFirstNameChange(this.options[this.selectedIndex].value);" })
                        @Html.ValidationMessageFor(m => m.StudentFirstNameID)
                        *@
                    </td>
                </tr>

                <tr>
                    <td colspan="5" style="text-align:center">
                        <button type="button" id="studentAdd">Add</button>
                        <button type="button" id="studentEdit">Edit</button>

                       <button type="button" id="studentDelete">Delete</button>
                        
                        <input type="submit" value="Save" />
                        @*
                        <button type="button" id="refreshStudent">Refresh</button>
                        <button type="button" id="saveStudent">Save</button>
                        *@

                        <button type="button" id="printStudent">Print</button>

                    </td>
                </tr>
            </table>

                @*
                @Html.ListBoxFor(x => Model.studentVM.StudentListFirstName, Model.studentVM.StudentListFirstName, new { @class = "chosen", Style = "width: 150px;" })
                @Html.DropDownListFor(x => Model.studentVM.StudentListFirstName, Model.studentVM.StudentListFirstName, "select", new { @ID = "ddlCountry", @class = "chosen-select", Style = "width: 150px;" })
            
            
                    ,new { @class = "chzn-select", data_placeholder = "Choose  Countries..." })
                @Html.DropDownListFor("", new SelectList(Model.Departments, "DepartmentId", "Name"), string.Empty)
                <input type="search" name="searchTerm" data-otf-autocomplete="@Url.Action("Autocomplete")" />
                <input type="submit" value="Search" />
                *@

            
        
            <hr>

            <ul>
                <li><a href="#Student-General">General</a></li>
                <li><a href="#Student-Preferences">Preferences</a></li>
                <li><a href="#Student-Matching-S">Matching-S</a></li>
                <li><a href="#Student-Children">Children</a></li>
                <li><a href="#Student-Computer">Computer</a></li>
                <li><a href="#Student-Assessment-Intake">Assessment Intake</a></li>
                <li><a href="#Student-Assessment-Goals">Assessment Goals</a></li>
                <li><a href="#Student-Roles-and-Goals">Roles and Goals</a></li>
                <li><a href="#tabsStudent-Accomplishements">Accomplishements</a></li>
                <li><a href="#Student-Comments">Comments</a></li>
                <li><a href="#Student-FollowUp">FollowUp</a></li>
                <li><a href="#Student-Status-History">Status History</a></li>
            </ul>

            
            <div>
                @Html.Partial("_Student-General-View", Model) 
            </div>
       
            <div>
                @Html.Partial("_Student-Preferences-View", Model)
            </div>
    @*
             <div id="divStudent">
               @Html.Partial("_Student-All-View", Model) 
           </div>
      *@
           
            <div id="Student-Matching-S">
                @Html.Partial("_Student-Matching-S-View", Model)
            </div>
       
            <div id="Student-Children">
                @Html.Partial("_Student-Children-View", Model)
            </div>
       
            <div id="Student-Computer">
                Computer
            </div>
       
            <div id="Student-Assessment-Intake">
                Assessment-Intake
            </div>
       
            <div id="Student-Assessment-Goals">
                Assessment-Goals
            </div>
       
            <div id="Student-Roles-and-Goals">
                Roles-and-Goals
            </div>
       
            <div id="tabsStudent-Accomplishements">
                Accomplishements
            </div>
       
            <div id="Student-Comments">
                Comments
            </div>
       
            <div id="Student-FollowUp">
                FollowUp
            </div>
       
            <div id="Student-Status-History">
                Status-History
            </div>

        } @* </form> *@
    </div>

@section scripts
{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/select2.css")"/>
    <link rel="stylesheet" media="screen" href="@Url.Content("~/Content/superfish.css")"/>
    
    <script type="text/javascript" src="@Url.Content("~/Scripts/select2.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/toDictionary.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.serializeJSON.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/superfish.js")"</script>

     @*
     <script type="text/javascript" src="@Url.Content("~/Scripts/appjs/student-general.partialview.js")"></script>
  There are two ways.
    First one is the common way that serializes your form (when your ViewModel data is presented in the view as a form). Ajax call will likely be issued within form submit handler (meaning that this will refer to form DOM element):

    $.ajax({ ..., data: $(this).serialize(), ...});

    As you can see, there's no use of toDictionary in this case because most of the things will work out of the box. Vast majority of forms aren't dynamic so they don't just add additional fields to them.

    Second way is less common and uses a JSON object and posts back that one. In this case there's no completely direct way of providing your server-side ViewModel on the client (unless you JSON-encode it and send it within the view). So when you want your actual ViewModel instance to access on the client then supposedly JSON encode it and put it i.e. as an attribute on some element that represents your model. All you'd have to do afterwards is to
    1. read that data,
    2. create Javascript instance of this JSON object
    3. manipulate it
    4. serialize it and send it back to server

    var model = $.parseJSON($("#someEl").data("view-model-data"));
    //manipulate model
    $.ajax({ ..., data: $.toDictionary(model),... });

    <script type="text/javascript">
        $(document).ready(function () {

            $(".datefield").datepicker();

        });
    </script>

     <script>
         function getFormattedDate(date) {
         //$.fn.getFormattedDate = function(date) {
            //var dt = data.CurrentStudent.ActiveDate.toString();
            if (date == null)
                return null;
            var dt = eval("new " + date.toString().replace(/[\\/]/g, ""));
            return new Date(dt);
        };
    </script>
    *@

    @* 1/30/14 for some reason, if they are not here then the select2() won't work *@
    <script>
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            var pageSize = 20;
            //$('ul.sf-menu').superfish();

            $(".datefield").datepicker();
            $("#tabs").tabs();
            $("#tabs-Students").tabs();

            $("#StudentListLastName").select2(
            {
                placeholder: 'Enter last name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: '@Url.Action("GetStudentsName", "Home")',
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            activeOnly: $('#ActiveOnly').is(':checked'),
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            byLastName: true
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected movie's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the movie name is shown preselected
                    var id = element.val();
                    //var text = element.data('text');
                    var text = $('#CurrentStudent_LastName').val() + ", " + $('#CurrentStudent_FirstName').val();
                    var data = { id: id, text: text };
                    callback(data);
                }
            });

            $("#StudentListLastName").on("change", function (e) {
                currentStudentId = e.val;
                //alert("Student Last Name: " + currentStudentId);
                //$('#Student-Matching-S').jtable('load', { SID: currentStudentId });
            });

            $("#StudentListFirstName").select2(
            {
                placeholder: 'Enter first name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: '@Url.Action("GetStudentsName", "Home")',
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            activeOnly: $('#ActiveOnly').is(':checked'),
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            byLastName: false
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected movie's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the movie name is shown preselected
                    var id = element.val();
                    //var text = element.data('text');
                    var text = $('#CurrentStudent_FirstName').val() + " " + $('#CurrentStudent_LastName').val();
                    var data = { id: id, text: text };
                    callback(data);
                }
            });

            $("#StudentListFirstName").on("change", function (e) {
                currentStudentId = e.val;
                //alert("Student First Name: " + currentStudentId);
                //$('#Student-Matching-S').jtable('load', { SID: currentStudentId });
            });


            $("#TutorNameList").select2(
            {
                placeholder: 'Enter last name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: '@Url.Action("GetTutorsName", "Home")',
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            byLastName: true
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected movie's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the movie name is shown preselected
                    var id = element.val();
                    //var text = element.data('text');
                    var text = $('#CurrentStudent_FirstName').val() + " " + $('#CurrentStudent_LastName').val();
                    var data = { id: id, text: text };
                    //callback(data);
                }
            });

            $("#TutorNameList").on("change", function (e) {
                currentTutortId = $("#TutorNameList").select2('data').text; // e.val() returns the ID, or
                // $("#TutorNameList").select2('data').id  returns the ID
                //alert("Tutor: " + currentTutortId + " => " + $("#TutorNameList").val());
            });


            @*
        });  // $(document).ready()
    </script>

    <script type="text/javascript">
*@

            @* --- ADD --- *@
            $('#studentAdd').click(function () {
                //alert("studentAdd");
                $('#EditMode').val("add");
                location.reload(true);

                @*
                alert("addStudent");
                var firstName = $('#StudentListFirstName').val;
                var lastName = $('#StudentListLastName').val;
                alert("Last: " + lastName + ", " + "First: " + firstName);
                var studentvm = @(Model.studentVM);//$("form").serialize();
                *@

                @*
               $.ajax({
                    url: '@Url.Content("~/Student/Index")',
                     type: 'get',
                     cache: false,
                    // async: false,      // IMPORTANT to have this statement. If not the Home/Index will be called and the result is we'll have an empty form.
                    //data: $.toDictionary(studentvm, "studentvm"),
                     //contentType: 'application/json; charset=utf-8',
                 }).done(function () {
                     //alert("done");

                 }).complete(function () {
                     alert("complete");
                     //$.ready();
                     location.reload(true);
                 }).success(function (dv) {
                     //alert("success");
                 }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                     var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                     alert("There was an error calling editStudent: " + errorMessage);
                 });
                 *@
            });

            @* --- EDIT --- *@
            $('#studentEdit').click(function () {
                //alert("studentEdit clicked");
                //if (currentStudentId != $('#CurrentStudent_ID').val()) {
                //    currentStudentId = $('#CurrentStudent_ID').val();
                //}
                //alert("Student: editStudent: " + currentStudentId.toString());
                //var m = $("form").serialize();
                //alert(m);
                //var studentId = $('#StudentListLastName').select2("val");
                $.ajax({
                    url: '@Url.Content("~/Student/Edit")', @*'@Url.Content("~/Student/Edit")',*@
                    type: 'get',
                    cache: false,
                    async: false,      // IMPORTANT to have this statement. If not the Home/Index will be called and the result is we'll have an empty form.
                    data: { id: currentStudentId },       //currStudentId{ studentvm: m }  ---- $.toDictionary(m, "studentvm"),
                    @*
                     contentType: 'application/json; charset=utf-8',
                   data: { Command: "approve", lastName: last, firstName: first },
                     *@
                }).done(function (data) {
                   // alert('done');
                    //$("#Student-General").replaceWith(data);
                }).complete(function () {
                   // alert("complete");
                }).success(function (data) {
                    //alert('success');
                   $('#EditMode').val("edit");
                   //alert( $('#EditMode').val());

                    $.fn.populateStudentForm(data);

                    // alert(data.CurrentStudent.LastName);
                    //alert(JSON.stringify(JsonObj));
                    //console.log(JSON.stringify(JsonObj));

                    //$("#span1").html(JsonObj.Student.Name);
                    //$("#span2").html(JsonObj.Teacher.Name);

                    //                     $("#Student-General").empty().append(data); 
                    //                     $("#Student-Preferences").empty().append(data); 

                    // MUST reload the date picker in order for it to work AFTER coming back from calling the Partial View.
                    $(".datefield").datepicker();

                    //alert($('#CurrentStudent_ID').val);

                }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                    var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                    alert("There was an error calling editStudent: " + errorMessage);
                });
            });

            $('#studentDelete').click(function (event) {
                //alert("studentDelete");

                //if ($('#CurrentStudent_ID').val() > 0) {
                if (currentStudentId > 0) {

                    event.preventDefault();
                    $('<div title="Confirm Student Deletion"></div>').dialog({
                        open: function (event, ui) {
                            $(this).html("Yes or No?");
                        },
                        close: function () {
                            $(this).remove();
                        },
                        resizable: false,
                        height: 140,
                        modal: true,
                        buttons: {
                            'Yes': function () {
                                $(this).dialog('close');
                                //$.post('/Student/Delete');
                                $.post('@Url.Content("~/Student/Delete")', { "id": currentStudentId },
                                    function (data) {
                                        // Successful requests get here
                                        location.reload(true);

                                        //$('#cart-total').text(data.CartTotal);
                                        //$("#StudentListLastName").select2("val", "");
                                        //$("#StudentListFirstName").select2("val", "");
                                        //$('#MatchT_CurrentStudent_FirstName').val(data.CurrentStudent.FirstName);

                                    });

                            },
                            'No': function () {
                                $(this).dialog('close');
                                $.post('url/theOtherValueYouWantToPAss');
                            }
                        }
                    });

                };

                @*
               $.ajax({
                    url: '@Url.Content("~/Student/Delete")',
                     //type: 'get',
                     //cache: false,
                    // async: false,      // IMPORTANT to have this statement. If not the Home/Index will be called and the result is we'll have an empty form.
                   data: { id: currentStudentId },
                     //contentType: 'application/json; charset=utf-8',
                 }).done(function () {
                     //alert("done");

                 }).complete(function () {
                     //alert("complete");
                 }).success(function (dv) {
                     //alert("success");
                 }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                     var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                     alert("There was an error calling editStudent: " + errorMessage);
                 });
                *@
            });

            @*
            <script>
            $(function() {
                $( "#dialog-confirm" ).dialog({
                    resizable: false,
                    height:140,
                    modal: true,
                    buttons: {
                        "Delete all items": function() {
                            $( this ).dialog( "close" );
                        },
                        Cancel: function() {
                            $( this ).dialog( "close" );
                        }
                    }
                });
            });
            </script>
            *@

            $.fn.populateStudentForm = function (data) {
                $('#Student-Matching-S').jtable('load', { SID: currentStudentId });//$('#CurrentStudent_ID').val()
                $('#Student-Children').jtable('load', { studentId: currentStudentId });//$('#CurrentStudent_ID').val()

                $('#CurrentStudent_ID').val(data.CurrentStudent.ID);
                $('#CurrentStudent_Salutation').val(data.CurrentStudent.Salutation);

                $('#MatchT_CurrentStudent_FirstName').val(data.CurrentStudent.FirstName);
                $('#MatchT_CurrentStudent_LastName').val(data.CurrentStudent.LastName);

                $('#CurrentStudent_FirstName').val(data.CurrentStudent.FirstName);
                $('#CurrentStudent_LastName').val(data.CurrentStudent.LastName);
                $('#CurrentStudent_Address1').val(data.CurrentStudent.Address1);
                $('#CurrentStudent_Address2').val(data.CurrentStudent.Address2);
                $('#CurrentStudent_City').val(data.CurrentStudent.City);
                $('#CurrentStudent_State').val(data.CurrentStudent.State);
                $('#CurrentStudent_Zip').val(data.CurrentStudent.Zip);
                $('#CurrentStudent_HomeAreaCode').val(data.CurrentStudent.HomeAreaCode);
                $('#CurrentStudent_HomePhone').val(data.CurrentStudent.HomePhone);
                $('#CurrentStudent_WorkAreaCode').val(data.CurrentStudent.WorkAreaCode);
                $('#CurrentStudent_WorkPhone').val(data.CurrentStudent.WorkPhone);
                $('#CurrentStudent_WorkPhoneExt').val(data.CurrentStudent.WorkPhoneExt);
                $('#CurrentStudent_FAXAreaCode').val(data.CurrentStudent.FAXAreaCode);
                $('#CurrentStudent_FAX').val(data.CurrentStudent.FAX);
                $('#CurrentStudent_CellAreaCode1').val(data.CurrentStudent.CellAreaCode1);
                $('#CurrentStudent_CellPhone1').val(data.CurrentStudent.CellPhone1);
                $('#CurrentStudent_CellAreaCode2').val(data.CurrentStudent.CellAreaCode2);
                $('#CurrentStudent_CellAreaPhone2').val(data.CurrentStudent.CellAreaPhone2);
                $('#CurrentStudent_ContactPref').val(data.CurrentStudent.ContactPref);
                $('#CurrentStudent_EMail').val(data.CurrentStudent.EMail);
                $('#CurrentStudent_Gender').val(data.CurrentStudent.Gender);
                $('#CurrentStudent_Ethnicity').val(data.CurrentStudent.Ethnicity);
                $('#CurrentStudent_Income').val(data.CurrentStudent.Income);
                $('#CurrentStudent_Occupation').val(data.CurrentStudent.Occupation);
                $('#CurrentStudent_Employer').val(data.CurrentStudent.Employer);
                $('#CurrentStudent_EmployerStatus').val(data.CurrentStudent.EmployerStatus);
                $('#CurrentStudent_EmergContact').val(data.CurrentStudent.EmergContact);
                $('#CurrentStudent_EmergAreaCode').val(data.CurrentStudent.EmergAreaCode);
                $('#CurrentStudent_EmergPhone').val(data.CurrentStudent.EmergPhone);
                $('#CurrentStudent_CallLocation').val(data.CurrentStudent.CallLocation);

                var fmt = $.fn.getFormattedDate(data.CurrentStudent.DOB);
                $('#CurrentStudent_DOB').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
                $('#CurrentStudent_Country').val(data.CurrentStudent.Country);
                $('#CurrentStudent_NativeLanguage').val(data.CurrentStudent.NativeLanguage);
                $('#CurrentStudent_EducationLevel').val(data.CurrentStudent.EducationLevel);
                $('#CurrentStudent_ReadWriteNativeLang').val(data.CurrentStudent.ReadWriteNativeLang);
                $('#CurrentStudent_Referral').val(data.CurrentStudent.Referral);

                fmt = $.fn.getFormattedDate(data.CurrentStudent.FingerPrintDate);
                $('#CurrentStudent_FingerPrintDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
                $('#CurrentStudent_Staff').val(data.CurrentStudent.Staff);
                $('#CurrentStudent_Source').val(data.CurrentStudent.Source);

                fmt = $.fn.getFormattedDate(data.CurrentStudent.IntakeDate);
                $('#CurrentStudent_IntakeDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                fmt = $.fn.getFormattedDate(data.CurrentStudent.FirstActive);
                $('#CurrentStudent_FirstActive').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
                if (data.CurrentStudent.Active == true) {
                    $('#CurrentStudent_Active').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_Active').prop("checked", false);
                }

                fmt = $.fn.getFormattedDate(data.CurrentStudent.ActiveDate);
                $('#CurrentStudent_ActiveDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
                $('#CurrentStudent_Status').val(data.CurrentStudent.Status);
                if (data.CurrentStudent.InActive == true) {
                    $('#CurrentStudent_InActive').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_InActive').prop("checked", false);
                }
                $('#CurrentStudent_InActiveReason').val(data.CurrentStudent.InActiveReason);
                $('#CurrentStudent_Program').val(data.CurrentStudent.Program);
                $('#CurrentStudent_MailCode').val(data.CurrentStudent.MailCode);
                $('#CurrentStudent_Category').val(data.CurrentStudent.Category);
                $('#CurrentStudent_Keyword').val(data.CurrentStudent.Keyword);

                if (data.CurrentStudent.AvailMonAM == true) {
                    $('#CurrentStudent_AvailMonAM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailMonAM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailTueAM == true) {
                    $('#CurrentStudent_AvailTueAM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailTueAM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailWedAM == true) {
                    $('#CurrentStudent_AvailWedAM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailWedAM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailThuAM == true) {
                    $('#CurrentStudent_AvailThuAM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailThuAM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailFriAM == true) {
                    $('#CurrentStudent_AvailFriAM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailFriAM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailSatAM == true) {
                    $('#CurrentStudent_AvailSatAM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailSatAM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailSunAM == true) {
                    $('#CurrentStudent_AvailSunAM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailSunAM').prop("checked", false);
                }

                if (data.CurrentStudent.AvailTueAM == true) {
                    $('#CurrentStudent_AvailTueAM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailTueAM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailMonPM == true) {
                    $('#CurrentStudent_AvailMonPM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailMonPM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailTuePM == true) {
                    $('#CurrentStudent_AvailTuePM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailTuePM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailWedPM == true) {
                    $('#CurrentStudent_AvailWedPM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailWedPM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailThuPM == true) {
                    $('#CurrentStudent_AvailThuPM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailThuPM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailFriPM == true) {
                    $('#CurrentStudent_AvailFriPM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailFriPM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailSatPM == true) {
                    $('#CurrentStudent_AvailSatPM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailSatPM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailSunAM == true) {
                    $('#CurrentStudent_AvailSunPM').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailSunPM').prop("checked", false);
                }
                if (data.CurrentStudent.AvailMonEVE == true) {
                    $('#CurrentStudent_AvailMonEVE').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailMonEVE').prop("checked", false);
                }
                if (data.CurrentStudent.AvailTueEVE == true) {
                    $('#CurrentStudent_AvailTueEVE').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailTueEVE').prop("checked", false);
                }
                if (data.CurrentStudent.AvailWedEVE == true) {
                    $('#CurrentStudent_AvailWedEVE').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailWedEVE').prop("checked", false);
                }
                if (data.CurrentStudent.AvailThudEVE == true) {
                    $('#CurrentStudent_AvailThudEVE').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailThudEVE').prop("checked", false);
                }
                if (data.CurrentStudent.AvailFriEVE == true) {
                    $('#CurrentStudent_AvailFriEVE').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailFriEVE').prop("checked", false);
                }
                if (data.CurrentStudent.AvailSatEVE == true) {
                    $('#CurrentStudent_AvailSatEVE').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailSatEVE').prop("checked", false);
                }
                if (data.CurrentStudent.AvailSunEVE == true) {
                    $('#CurrentStudent_AvailSunEVE').prop("checked", true);
                }
                else {
                    $('#CurrentStudent_AvailSunEVE').prop("checked", false);
                }

                $('#CurrentStudent_Transportation').val(data.CurrentStudent.Transportation);
                $('#CurrentStudent_StudentContact').val(data.CurrentStudent.StudentContact);
                $('#CurrentStudent_SmokingPref').val(data.CurrentStudent.SmokingPref);
                $('#CurrentStudent_LocationPref').val(data.CurrentStudent.LocationPref);
                $('#CurrentStudent_TutorSmoker').val(data.CurrentStudent.TutorSmoker);
                $('#CurrentStudent_MedicalInfo').val(data.CurrentStudent.MedicalInfo);
                $('#CurrentStudent_LocationPref2').val(data.CurrentStudent.LocationPref2);
                $('#CurrentStudent_LocationPref3').val(data.CurrentStudent.LocationPref3);
                $('#CurrentStudent_InterestHobbies').val(data.CurrentStudent.InterestHobbies);
                $('#CurrentStudent_TutorPreference').val(data.CurrentStudent.TutorPreference);
                $('#CurrentStudent_SpecialInstructions').val(data.CurrentStudent.SpecialInstructions);

                fmt = $.fn.getFormattedDate(data.CurrentStudent.FirstCalledByDate);
                $('#CurrentStudent_FirstCalledByDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
                $('#CurrentStudent_FirstCalledBy').val(data.CurrentStudent.FirstCalledBy);
                $('#CurrentStudent_HowHeard').val(data.CurrentStudent.HowHeard);

                fmt = $.fn.getFormattedDate(data.CurrentStudent.PreLibraryCard);
                $('#CurrentStudent_PreLibraryCard').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                fmt = $.fn.getFormattedDate(data.CurrentStudent.LibraryCard);
                $('#CurrentStudent_LibraryCard').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
            };

            $.fn.getFormattedDate = function(date) {
                //var dt = data.CurrentStudent.ActiveDate.toString();
                if (date == null)
                    return null;
                var dt = eval("new " + date.toString().replace(/[\\/]/g, ""));
                return new Date(dt);
            };

            // this is to care care of the case of after a "save" is executed
            if ($('#CurrentStudent_ID').val() > 0)
            {
                $('#Student-Matching-S').jtable('load', { SID: $('#CurrentStudent_ID').val() });//currentStudentId
            }   

        });  // $(document).ready()

    </script>


    @*
    <script type="text/javascript">
        function _EditComplete(data) {
            // alert(data.responseText);
            //var JsonObj = $.parseJSON(data.responseText);
            //$("#span1").html(JsonObj.Student.Name);
            //$("#span2").html(JsonObj.Teacher.Name);
        }
    </script>

    <script type="text/javascript">
        //function onStudentLastNameChange(value) {
        function onStudentLastNameChange() {
            currStudentId = ($("#StudentListLastName").select2("val"));
            //alert(currStudentId);
            //alert($("#StudentListLastName").select2("val"));
            //$("#StudentListFirstName").select2("val", "Aaron Ford");
        }
    </script>
    
    <script type="text/javascript">
        function onStudentFirstNameChange(value) {
            currStudentId = ($("#StudentListFirstName").select2("val"));
            //alert(currStudentId);
        }
    </script>

    <script type="text/javascript">
        function populateStudentForm(data) {
            $('#CurrentStudent_ID').val(data.CurrentStudent.ID);
            $('#CurrentStudent_Salutation').val(data.CurrentStudent.Salutation);
            $('#CurrentStudent_FirstName').val(data.CurrentStudent.FirstName);
            $('#CurrentStudent_LastName').val(data.CurrentStudent.LastName);
            $('#CurrentStudent_Address1').val(data.CurrentStudent.Address1);
            $('#CurrentStudent_Address2').val(data.CurrentStudent.Address2);
            $('#CurrentStudent_City').val(data.CurrentStudent.City);
            $('#CurrentStudent_State').val(data.CurrentStudent.State);
            $('#CurrentStudent_Zip').val(data.CurrentStudent.Zip);
            $('#CurrentStudent_HomeAreaCode').val(data.CurrentStudent.HomeAreaCode);
            $('#CurrentStudent_HomePhone').val(data.CurrentStudent.HomePhone);
            $('#CurrentStudent_WorkAreaCode').val(data.CurrentStudent.WorkAreaCode);
            $('#CurrentStudent_WorkPhone').val(data.CurrentStudent.WorkPhone);
            $('#CurrentStudent_WorkPhoneExt').val(data.CurrentStudent.WorkPhoneExt);
            $('#CurrentStudent_FAXAreaCode').val(data.CurrentStudent.FAXAreaCode);
            $('#CurrentStudent_FAX').val(data.CurrentStudent.FAX);
            $('#CurrentStudent_CellAreaCode1').val(data.CurrentStudent.CellAreaCode1);
            $('#CurrentStudent_CellPhone1').val(data.CurrentStudent.CellPhone1);
            $('#CurrentStudent_CellAreaCode2').val(data.CurrentStudent.CellAreaCode2);
            $('#CurrentStudent_CellAreaPhone2').val(data.CurrentStudent.CellAreaPhone2);
            $('#CurrentStudent_ContactPref').val(data.CurrentStudent.ContactPref);
            $('#CurrentStudent_EMail').val(data.CurrentStudent.EMail);
            $('#CurrentStudent_Gender').val(data.CurrentStudent.Gender);
            $('#CurrentStudent_Ethnicity').val(data.CurrentStudent.Ethnicity);
            $('#CurrentStudent_Income').val(data.CurrentStudent.Income);
            $('#CurrentStudent_Occupation').val(data.CurrentStudent.Occupation);
            $('#CurrentStudent_Employer').val(data.CurrentStudent.Employer);
            $('#CurrentStudent_EmployerStatus').val(data.CurrentStudent.EmployerStatus);
            $('#CurrentStudent_EmergContact').val(data.CurrentStudent.EmergContact);
            $('#CurrentStudent_EmergAreaCode').val(data.CurrentStudent.EmergAreaCode);
            $('#CurrentStudent_EmergPhone').val(data.CurrentStudent.EmergPhone);
            $('#CurrentStudent_CallLocation').val(data.CurrentStudent.CallLocation);
            //$('#CurrentStudent_DOB').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', getFormattedDate(data.CurrentStudent.DOB));
            $('#CurrentStudent_Country').val(data.CurrentStudent.Country);
            $('#CurrentStudent_NativeLanguage').val(data.CurrentStudent.NativeLanguage);
            $('#CurrentStudent_EducationLevel').val(data.CurrentStudent.EducationLevel);
            $('#CurrentStudent_ReadWriteNativeLang').val(data.CurrentStudent.ReadWriteNativeLang);
            $('#CurrentStudent_Referral').val(data.CurrentStudent.Referral);
           // $('#CurrentStudent_FingerPrintDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', getFormattedDate(data.CurrentStudent.FingerPrintDate));
            $('#CurrentStudent_Staff').val(data.CurrentStudent.Staff);
            $('#CurrentStudent_Source').val(data.CurrentStudent.Source);
            //$('#CurrentStudent_IntakeDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', getFormattedDate(data.CurrentStudent.IntakeDate));
            //$('#CurrentStudent_FirstActive').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', getFormattedDate(data.CurrentStudent.FirstActive));
            if (data.CurrentStudent.Active == true) {
                $('#CurrentStudent_Active').prop("checked", true);
            }
            else {
                $('#CurrentStudent_Active').prop("checked", false);
            }
            //$('#CurrentStudent_ActiveDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', getFormattedDate(data.CurrentStudent.ActiveDate));
            $('#CurrentStudent_Status').val(data.CurrentStudent.Status);
            if (data.CurrentStudent.InActive == true) {
                $('#CurrentStudent_InActive').prop("checked", true);
            }
            else {
                $('#CurrentStudent_InActive').prop("checked", false);
            }
            $('#CurrentStudent_InActiveReason').val(data.CurrentStudent.InActiveReason);
            $('#CurrentStudent_Program').val(data.CurrentStudent.Program);
            $('#CurrentStudent_MailCode').val(data.CurrentStudent.MailCode);
            $('#CurrentStudent_Category').val(data.CurrentStudent.Category);
            $('#CurrentStudent_Keyword').val(data.CurrentStudent.Keyword);

            if (data.CurrentStudent.AvailMonAM == true) {
                $('#CurrentStudent_AvailMonAM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailMonAM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailTueAM == true) {
                $('#CurrentStudent_AvailTueAM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailTueAM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailWedAM == true) {
                $('#CurrentStudent_AvailWedAM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailWedAM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailThuAM == true) {
                $('#CurrentStudent_AvailThuAM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailThuAM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailFriAM == true) {
                $('#CurrentStudent_AvailFriAM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailFriAM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailSatAM == true) {
                $('#CurrentStudent_AvailSatAM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailSatAM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailSunAM == true) {
                $('#CurrentStudent_AvailSunAM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailSunAM').prop("checked", false);
            }

            if (data.CurrentStudent.AvailTueAM == true) {
                $('#CurrentStudent_AvailTueAM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailTueAM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailMonPM == true) {
                $('#CurrentStudent_AvailMonPM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailMonPM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailTuePM == true) {
                $('#CurrentStudent_AvailTuePM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailTuePM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailWedPM == true) {
                $('#CurrentStudent_AvailWedPM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailWedPM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailThuPM == true) {
                $('#CurrentStudent_AvailThuPM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailThuPM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailFriPM == true) {
                $('#CurrentStudent_AvailFriPM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailFriPM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailSatPM == true) {
                $('#CurrentStudent_AvailSatPM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailSatPM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailSunAM == true) {
                $('#CurrentStudent_AvailSunPM').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailSunPM').prop("checked", false);
            }
            if (data.CurrentStudent.AvailMonEVE == true) {
                $('#CurrentStudent_AvailMonEVE').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailMonEVE').prop("checked", false);
            }
            if (data.CurrentStudent.AvailTueEVE == true) {
                $('#CurrentStudent_AvailTueEVE').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailTueEVE').prop("checked", false);
            }
            if (data.CurrentStudent.AvailWedEVE == true) {
                $('#CurrentStudent_AvailWedEVE').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailWedEVE').prop("checked", false);
            }
            if (data.CurrentStudent.AvailThudEVE == true) {
                $('#CurrentStudent_AvailThudEVE').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailThudEVE').prop("checked", false);
            }
            if (data.CurrentStudent.AvailFriEVE == true) {
                $('#CurrentStudent_AvailFriEVE').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailFriEVE').prop("checked", false);
            }
            if (data.CurrentStudent.AvailSatEVE == true) {
                $('#CurrentStudent_AvailSatEVE').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailSatEVE').prop("checked", false);
            }
            if (data.CurrentStudent.AvailSunEVE == true) {
                $('#CurrentStudent_AvailSunEVE').prop("checked", true);
            }
            else {
                $('#CurrentStudent_AvailSunEVE').prop("checked", false);
            }

            $('#CurrentStudent_Transportation').val(data.CurrentStudent.Transportation);
            $('#CurrentStudent_StudentContact').val(data.CurrentStudent.StudentContact);
            $('#CurrentStudent_SmokingPref').val(data.CurrentStudent.SmokingPref);
            $('#CurrentStudent_LocationPref').val(data.CurrentStudent.LocationPref);
            $('#CurrentStudent_TutorSmoker').val(data.CurrentStudent.TutorSmoker);
            $('#CurrentStudent_MedicalInfo').val(data.CurrentStudent.MedicalInfo);
            $('#CurrentStudent_LocationPref2').val(data.CurrentStudent.LocationPref2);
            $('#CurrentStudent_LocationPref3').val(data.CurrentStudent.LocationPref3);
            $('#CurrentStudent_InterestHobbies').val(data.CurrentStudent.InterestHobbies);
            $('#CurrentStudent_TutorPreference').val(data.CurrentStudent.TutorPreference);
            $('#CurrentStudent_SpecialInstructions').val(data.CurrentStudent.SpecialInstructions);
           // $('#CurrentStudent_FirstCalledByDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', getFormattedDate(data.CurrentStudent.FirstCalledByDate));
            $('#CurrentStudent_FirstCalledBy').val(data.CurrentStudent.FirstCalledBy);
            $('#CurrentStudent_HowHeard').val(data.CurrentStudent.HowHeard);
            //$('#CurrentStudent_PreLibraryCard').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', getFormattedDate(data.CurrentStudent.PreLibraryCard));
           // $('#CurrentStudent_LibraryCard').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', getFormattedDate(data.CurrentStudent.LibraryCard));
        }
    </script>
    *@

}