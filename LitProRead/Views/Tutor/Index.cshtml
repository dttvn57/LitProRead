@model LitProRead.ViewModels.TutorFormViewModel

@{
    ViewBag.Title = "Tutor Page";
    var currentTutorId = 0;
    if (Model != null && Model.CurrentTutor != null)
    {
        currentTutorId = Model.CurrentTutor.ID;
    }

    var editMode = "del";
}

<style>
    .select2-container {
        width:250px;
    }
</style>

<div style="font-weight: bold;">
T U T O R S
</div>

<div id="tabs-Tutors">

    @using (Html.BeginForm("Edit", "Tutor", FormMethod.Post))
    { 
        @*
        @Html.AntiForgeryToken()
            @Html.HiddenFor(x => Model.CurrentTutor.ID)
            
        @Html.ValidationSummary(true)
        *@
              
            @Html.HiddenFor(x => Model.CurrentTutor.ID)
            @Html.HiddenFor(x => Model.EditMode)
            @Html.HiddenFor(x => Model.CurrentRecordIndex)
            @Html.HiddenFor(x => Model.RecordsCnt)
            @Html.HiddenFor(x => Model.ByLastName)
            @Html.HiddenFor(x => Model.SelectedLastName)
            @Html.HiddenFor(x => Model.SelectedLastNameId)
            @Html.HiddenFor(x => Model.SelectedFirstName)
            @Html.HiddenFor(x => Model.SelectedFirstNameId)
            
        <table>
            <colgroup>
                    <col style="width:20%;"/>
                    <col style="width:20%;"/>
                    <col style="width:20%;"/>
                    <col style="width:20%;"/>
                    <col style="width:20%;"/>
            </colgroup>

            <tr>
                <td>
                    @Html.CheckBox("ActiveOnly", true)Active Only
                </td>
                <td style="text-align:right; border:0 none;">Last Name
                </td>
                <td style="text-align:left; border:0 none;">
                    @Html.TextBoxFor(m => m.TutorLastNameID, new { id = "TutorListLastName" }) 

                </td>
                <td style="text-align:right; border:0 none;">First Name
                </td>
                <td style="text-align:left; border:0 none;">
                    @Html.TextBoxFor(m => m.TutorFirstNameID, htmlAttributes: new { id = "TutorListFirstName" }) 
                </td>
            </tr>

            <tr>
                <td colspan="5" style="text-align:center">
                    <button type="button" id="tutorAdd">Add</button>
                    <button type="button" id="tutorEdit">Edit</button>

                    <button type="button" id="tutorDelete">Delete</button>
                        
                        <input type="submit"  id="tutorSave" value="Save" />
                        <button type="button" id="tutorCancel" onclick='cancelRecord()'>Cancel</button> 

                    <button type="button" id="printTutor">Print</button>

                </td>
            </tr>
        </table>

        
        <hr>

        <ul>
            <li><a href="#Tutor-General">General</a></li>
            <li><a href="#Tutor-Preferences">Preferences</a></li>
             @*
              *@
          <li><a href="#Tutor-Matching-T">Matching-T</a></li>
           <li><a href="#Tutor-Comments">Comments</a></li>
        </ul>

        <div>
            @Html.Partial("_Tutor-General-View", Model) 
        </div>
       
        <div>
            @Html.Partial("_Tutor-Preferences-View", Model)
        </div>
        
        @*
         *@
        <div id="Tutor-Matching-T">
            @Html.Partial("_Tutor-Matching-T-View", Model)
        </div>
       <div id="Tutor-Comments">
            @Html.Partial("_Tutor-Comments-View", Model)
        </div>
    }
</div>

<div >
    <img id="tutorFirst" src="~/Images/firstRec.jpg" onClick='recordNav("first")'/>
    <img id="tutorPrev" src="~/Images/prevRec.jpg" onClick='recordNav("prev")'/>
    <input class="pagingControl" type="text" id="tutorPages" style="width:30px" />
    <input class="pagingControl" type="text" id="tutorPagesLabel" style="width:80px; background-color:lightgrey" disabled="disabled"  />
    <img id="tutorNext" src="~/Images/nextRec.jpg" onClick='recordNav("next")'/>
    <img id="tutorLast" src="~/Images/lastRec.jpg" onClick='recordNav("last")'/>

</div>

@section scripts
{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/select2.css")"/>
    <link rel="stylesheet" media="screen" href="@Url.Content("~/Content/superfish.css")"/>
    <script type="text/javascript" src="@Url.Content("~/Scripts/select2.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/toDictionary.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.serializeJSON.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/superfish.js")"</script>

    @* 1/30/14 for some reason, if they are not here then the select2() won't work *@
    <script>
    </script>

    <script type="text/javascript">
        function recordNav(direction) {
            $.fn.handleTutorRecordNavigation(direction);
        }

        function cancelRecord() {
            $.fn.handleCancelRecord();
        }

        $(document).ready(function () {
            var pageSize = 20;
            //$('ul.sf-menu').superfish();

            $(".datefield").datepicker();
            $("#tabs").tabs();
            $("#tabs-Tutors").tabs();

            var pageSize = 20;
            //$('ul.sf-menu').superfish();



            $('#tutorPages').val(@Html.Raw(Json.Encode(Model.CurrentRecordIndex)));

            var pagesLabel = "of " + $('#RecordsCnt').val() + " Records";
            $('#tutorPagesLabel').val(pagesLabel);

            var mode = @Html.Raw(Json.Encode(Model.EditMode))
            $('#EditMode').val(mode);

            if (mode == "edit" || mode == "add") {
                $("input").addClass("editmode");
                $("textarea").addClass("editmode");
                $("select").addClass("editmode");
            }
            else {
                $("input").prop('disabled', true);
                $("textarea").prop('disabled', true);
                $("select").prop('disabled', true);

                $('#tutorDelete').prop('disabled', true);
                $('#tutorSave').prop('disabled', true);
            }

            $("#tutorPages").prop('disabled', false);

            // always enable the Last Name & First Name dropboxes for search + "active only" checkbox
            $('#TutorListLastName').prop('disabled', false);
            $('#TutorListFirstName').prop('disabled', false);
            $('#ActiveOnly').prop('disabled', false);

            // disable "Edit" button
            if (mode == "edit") {
                $('#tutorEdit').prop('disabled', false);
            }
            else {
                $('#tutorEdit').prop('disabled', true);
            }

            $(".datefield").datepicker();
            $("#tabs").tabs();
            $("#tabs-Tutors").tabs();

            $("#TutorListLastName").select2(
            {
                placeholder: 'Enter last name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: '@Url.Action("GetTutorsName", "Home")',
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            activeOnly: $('#ActiveOnly').is(':checked'),
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            byLastName: true
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected movie's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the movie name is shown preselected
                    if (mode == "view") {
                        var id = element.val();
                        //var id2 = $("#StudentListLastName").select2('data').id;
                        //var text2 = $("#StudentListLastName").select2('data').text;

                        //var text = element.data('text');
                        var text = $('#CurrentTutor_LastName').val() + ", " + $('#CurrentTutor_FirstName').val();
                        var data = { id: id, text: text };
                        callback(data);
                    }
                    else {
                        var id = $('#SelectedLastNameId').val();
                        var text = $('#SelectedLastName').val();
                        var data = { id: id, text: text };
                        callback(data);
                    }
                }
            });

            $("#TutorListLastName").on("change", function (e) {
                $("#ByLastName").val(true);

                var text = $("#TutorListLastName").select2('data').text;
                var id = $("#TutorListLastName").select2('data').id;
                $("#SelectedLastName").val(text);
                $("#SelectedLastNameId").val(id);


                currentTutorId = e.val;
                if (currentTutorId > 0) {
                    $.fn.handleEditRecord(currentTutorId, mode);
                    // enable "Edit" button
                    $('#tutorEdit').prop('disabled', false);
                    $('#tutorDelete').prop('disabled', false);
                    if (mode == "view") {
                        $('#tutorSave').prop('disabled', true);
                    }
                    else {
                        $('#tutorSave').prop('disabled', false);
                    }
                }
            });

            $("#TutorListFirstName").select2(
            {
                placeholder: 'Enter first name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: '@Url.Action("GetTutorsName", "Home")',
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            activeOnly: $('#ActiveOnly').is(':checked'),
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            byLastName: false
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected movie's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the movie name is shown preselected
                    if (mode == "view") {
                        var id = element.val();
                        var text = $('#CurrentTutor_FirstName').val() + " " + $('#CurrentTutor_LastName').val();
                        var data = { id: id, text: text };
                        callback(data);
                    }
                    else {
                        var id = $('#SelectedFirstNameId').val();
                        var text = $('#SelectedFirstName').val();
                        var data = { id: id, text: text };
                        callback(data);
                    }
                }
            });

            $("#TutorListFirstName").on("change", function (e) {
                $("#ByLastName").val(false);
                currentTutorId = e.val;

                var text = $("#TutorListFirstName").select2('data').text;
                var id = $("#STutorListFirstName").select2('data').id;
                $("#SelectedFirstName").val(text);
                $("#SelectedFirstNameId").val(id);

                if (currentTutorId > 0) {
                    $.fn.handleEditRecord(currentTutorId, mode);
                    // enable "Edit" button
                    $('#tutorEdit').prop('disabled', false);
                    $('#tutorDelete').prop('disabled', false);
                    if (mode == "view") {
                        $('#tutorSave').prop('disabled', true);
                    }
                    else {
                        $('#tutorSave').prop('disabled', false);
                    }

                }
            });

            $("#StudentNameList").select2(
            {
                placeholder: 'Enter last name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 0,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: '@Url.Action("GetStudentsName", "Home")',
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            activeOnly: $('#ActiveOnly').is(':checked'),
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            byLastName: true
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling                    
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected movie's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the movie name is shown preselected
                    var id = element.val();
                    //var text = element.data('text');
                    var text = $('#CurrentTutor_FirstName').val() + " " + $('#CurrentTutor_LastName').val();
                    var data = { id: id, text: text };
                    //callback(data);
                }
            });

            $("#StudentNameList").on("change", function (e) {
                currentStudentId = $("#StudentNameList").select2('data').text; // e.val() returns the ID, or
                // $("#StudentNameList").select2('data').id  returns the ID
                //alert("Tutor: " + currentStudentId + " => " + $("#StudentNameList").val());
            });

            $('#ActiveOnly').click(function () {

                $.ajax({
                    url: '@Url.Content("~/Home/GetTutorsCount")',
                    type: 'post',
                    cache: false,
                    // async: false,      // IMPORTANT to have this statement. If not the Home/Index will be called and the result is we'll have an empty form.
                    data: { activeOnly: $('#ActiveOnly').is(':checked') },
                    //contentType: 'application/json; charset=utf-8',
                }).done(function () {
                    //alert("done");
                }).complete(function () {
                    //alert("complete");
                }).success(function (data) {
                    //alert(data);
                    //$('#studentPages').val(data);
                    var pagesLabel = "of " + data + " Records";
                    $('#tutorPagesLabel').val(pagesLabel);

                }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                    var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                    alert("There was an error calling editTutor: " + errorMessage);
                });
            });

           @*
            // --- FIRST --- 
            $('#tuTorFirst').click(function () {
                $.fn.handleTutorRecordNavigation("first");
            });

            // --- LAST --- 
            $('#tuTorLast').click(function () {
                $.fn.handleTutorRecordNavigation("last");
            });

            // --- PREV --- 
            $('#tuTorPrev').click(function () {
                $.fn.handleTutorRecordNavigation("prev");
            });

            // --- NEXT --- 
            $('#tuTorNext').click(function () {
                alert("next ");
                $.fn.handleTutorRecordNavigation("next");
            });
            *@

            // --- CANCEL --- 
            //$('#tuTorCancel').click(function () {
            $.fn.handleCancelRecord = function () {
                $('#EditMode').val("view");

                $("input").prop('disabled', true);
                $("textarea").prop('disabled', true);
                $("select").prop('disabled', true);

                $('#tuTorDelete').prop('disabled', true);
                $('#tuTorSave').prop('disabled', true);
                $('#tuTorAdd').prop('disabled', false);
                $('#tuTorEdit').prop('disabled', false);

                // always enable the Last Name & First Name dropboxes for search + "active only" checkbox
                $('#TuTorListLastName').prop('disabled', false);
                $('#TuTorListFirstName').prop('disabled', false);
                $('#ActiveOnly').prop('disabled', false);

                $("input").removeClass("editmode");
                $("textarea").removeClass("editmode");
                $("select").removeClass("editmode");

                $("#tuTorPages").prop('disabled', false);
            };
            //});

            // --- ADD --- 
            $('#tutorAdd').click(function () {
                //alert("addTutor");
                $('#EditMode').val("add");

                // enable
                $("input").prop('disabled', false);
                $("textarea").prop('disabled', false);
                $("select").prop('disabled', false);

                // disable "Edit" button
                $('#tutorEdit').prop('disabled', true);
                $('#tutorSave').prop('disabled', false);

                $.fn.populateTutorForm("");

                $("input").addClass("editmode");
                $("textarea").addClass("editmode");
                $("select").addClass("editmode");
            });

            // --- EDIT --- 
            $('#tutorEdit').click(function () {
                $.fn.handleEditRecord(currentTutorId, "edit");
            });

            // --- DELETE --- 
            $('#tutorDelete').click(function (event) {
                //alert("tutorDelete");

                if (currentTutorId > 0) {

                    event.preventDefault();
                    $('<div title="Confirm Tutor Deletion"></div>').dialog({
                        open: function (event, ui) {
                            $(this).html("Yes or No?");
                        },
                        close: function () {
                            $(this).remove();
                        },
                        resizable: true,
                        height: 180,
                        modal: true,
                        buttons: {
                            'Yes': function () {
                                $(this).dialog('close');
                                //$.post('/Student/Delete');
                                $.post('@Url.Content("~/Tutor/Delete")', { "id": currentTutorId },
                                    function (data) {
                                        // Successful requests get here
                                        location.reload(true);

                                    });

                            },
                            'No': function () {
                                $(this).dialog('close');
                                $.post('url/theOtherValueYouWantToPAss');
                            }
                        }
                    });

                };
            });

            $.fn.handleTutorRecordNavigation = function (direction) {
                // enable
                var navUrl = '@Url.Content("~/Tutor/NextTutor")';
                if (direction == "prev") {
                    navUrl = '@Url.Content("~/Tutor/PrevTutor")';
                    }
                    else
                        if (direction == "first") {
                            navUrl = '@Url.Content("~/Tutor/FirstTutor")';
                        }
                        else
                            if (direction == "last") {
                                navUrl = '@Url.Content("~/Tutor/LastTutor")';
                        }
                var id = $('#CurrentTutor_ID').val();
                $.ajax({
                    url: navUrl,
                    type: 'get',
                    cache: false,
                    async: false,      // IMPORTANT to have this statement. If not the Home/Index will be called and the result is we'll have an empty form.
                    data: { currTutorId: id, activeOnly: $('#ActiveOnly').is(':checked'), byLastName: $("#ByLastName").val() },
                }).done(function (data) {
                    // alert('done');
                }).complete(function () {
                    // alert("complete");
                }).success(function (data) {
                    //alert('success');

                    //$('#EditMode').val("edit");
                    //alert( $('#EditMode').val());

                    $.fn.populateTutorForm(data);

                    // should update the new current tutor id

                    //synch the search tutor profiles boxes
                    var byLastName = $("#ByLastName").val();
                    if (byLastName == "True" || byLastName == "true") {
                        // these 2 have to be here, before the call to .select2() since this will trigger the select2's initSelection() which relies on the value of SelectedLastNameId and of SelectedLastName
                        $('#SelectedLastNameId').val(data.CurrentTutor.ID);
                        var name = data.CurrentTutor.LastName + ", " + data.CurrentTutor.FirstName;
                        $('#SelectedLastName').val(name);

                        $("#TutorListLastName").select2("val", name);
                    }
                    else {
                        // these 2 have to be here, before the call to .select2() since this will trigger the select2's initSelection() which relies on the value of SelectedFirstNameId and of SelectedFirstName
                        $('#SelectedFirstNameId').val(data.CurrentTutor.ID);
                        var name = data.CurrentTutor.FirstName + " " + data.CurrentTutor.LastName;
                        $('#SelectedFirstName').val(name);

                        $("#TutorListFirstName").select2("val", name);
                    }

                    // MUST reload the date picker in order for it to work AFTER coming back from calling the Partial View.
                    $(".datefield").datepicker();
                }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                    var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                    alert("There was an error calling editTutor: " + errorMessage);
                });
            };


            $.fn.handleEditRecord = function (recId, mode) {
                $('#EditMode').val(mode);

                if (mode == "edit")
                {
                    $("input").prop('disabled', false);
                    $("textarea").prop('disabled', false);
                    $("select").prop('disabled', false);

                    $("input").addClass("editmode");
                    $("textarea").addClass("editmode");
                    $("select").addClass("editmode");
                }

                $.ajax({
                    url: '@Url.Content("~/Tutor/Edit")',
                        type: 'get',
                        cache: false,
                        async: false,      // IMPORTANT to have this statement. If not the Home/Index will be called and the result is we'll have an empty form.
                        data: { id: recId, activeOnly: $('#ActiveOnly').is(':checked'), byLastName: $("#ByLastName").val() },
                    }).done(function (data) {
                        // alert('done');
                    }).complete(function () {
                        // alert("complete");
                    }).success(function (data) {
                        //alert('success');
                        //$('#EditMode').val(mode);   //"edit");
                        //alert( $('#EditMode').val());

                        $.fn.populateTutorForm(data);


                        // MUST reload the date picker in order for it to work AFTER coming back from calling the Partial View.
                        $(".datefield").datepicker();

                        //alert($('#CurrentTutor_ID').val);

                    }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                        var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                        alert("There was an error calling editTutor: " + errorMessage);
                });
            };


            $.fn.populateTutorForm = function (data) {
                if (data == "") {
                    var recCnt = @Html.Raw(Json.Encode(Model.RecordsCnt + 1))
                        $('#CurrentRecordIndex').val(recCnt);

                        $('#tutorPages').val(recCnt);
                        var pagesLabel = "of " +  recCnt + " Records";
                        $('#tutorPagesLabel').val(pagesLabel);

                        $('#Tutor-Matching-T').jtable('load', { TID: 0 });
                    //$('#Tutor-Children').jtable('load', { tutorId: 0 });
                        $('#Tutor-Comments').jtable('load', { tutorId: 0 });
                    //    $('#Tutor-FollowUp').jtable('load', { tutorId: 0 });

                    //$('#CurrentTutor_ID').val(data);

                        $('#CurrentTutor_Salutation').val(data);
                        $('#CurrentTutor_FirstName').val(data);
                        $('#CurrentTutor_LastName').val(data);
                        $('#CurrentTutor_Address1').val(data);
                        $('#CurrentTutor_Address2').val(data);
                        $('#CurrentTutor_City').val(data);
                        $('#CurrentTutor_State').val(data);
                        $('#CurrentTutor_Zip').val(data);
                        $('#CurrentTutor_HomeAreaCode').val(data);
                        $('#CurrentTutor_HomePhone').val(data);
                        $('#CurrentTutor_WorkAreaCode').val(data);
                        $('#CurrentTutor_WorkPhone').val(data);
                        $('#CurrentTutor_WorkPhoneExt').val(data);
                        $('#CurrentTutor_FAXAreaCode').val(data);
                        $('#CurrentTutor_FAX').val(data);
                        $('#CurrentTutor_CellAreaCode1').val(data);
                        $('#CurrentTutor_CellPhone1').val(data);
                        $('#CurrentTutor_CellAreaCode2').val(data);
                        $('#CurrentTutor_CellAreaPhone2').val(data);
                        $('#CurrentTutor_ContactPref').val(data);
                        $('#CurrentTutor_EMail').val(data);
                        $('#CurrentTutor_Gender').val(data);
                        $('#CurrentTutor_Ethnicity').val(data);
                        $('#CurrentTutor_Income').val(data);
                        $('#CurrentTutor_Occupation').val(data);
                        $('#CurrentTutor_Employer').val(data);
                        $('#CurrentTutor_EmployerStatus').val(data);
                        $('#CurrentTutor_EmergContact').val(data);
                        $('#CurrentTutor_EmergAreaCode').val(data);
                        $('#CurrentTutor_EmergPhone').val(data);
                        $('#CurrentTutor_CallLocation').val(data);

                        var fmt = "";
                        $('#CurrentTutor_DOB').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                        $('#CurrentTutor_Country').val(data);
                        $('#CurrentTutor_NativeLanguage').val(data);
                        $('#CurrentTutor_EducationLevel').val(data);
                        $('#CurrentTutor_ReadWriteNativeLang').val(data);
                        $('#CurrentTutor_Referral').val(data);

                        fmt = "";
                        $('#CurrentTutor_FingerPrintDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                        $('#CurrentTutor_Staff').val(data);
                        $('#CurrentTutor_Source').val(data);

                        fmt = "";
                        $('#CurrentTutor_IntakeDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                        fmt = "";
                        $('#CurrentTutor_FirstActive').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                        $('#CurrentTutor_Active').prop("checked", false);

                        fmt = "";
                        $('#CurrentTutor_ActiveDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                        $('#CurrentTutor_Status').val(data);

                        $('#CurrentTutor_InActive').prop("checked", false);

                        $('#CurrentTutor_Program').val(data);
                        $('#CurrentTutor_MailCode').val(data);
                        $('#CurrentTutor_Category').val(data);
                        $('#CurrentTutor_Keyword').val(data);


                        $('#CurrentTutor_AvailMonAM').prop("checked", false);
                        $('#CurrentTutor_AvailTueAM').prop("checked", false);
                        $('#CurrentTutor_AvailWedAM').prop("checked", false);
                        $('#CurrentTutor_AvailThuAM').prop("checked", false);
                        $('#CurrentTutor_AvailFriAM').prop("checked", false);
                        $('#CurrentTutor_AvailSatAM').prop("checked", false);
                        $('#CurrentTutor_AvailSunAM').prop("checked", false);
                        $('#CurrentTutor_AvailTueAM').prop("checked", false);
                        $('#CurrentTutor_AvailMonPM').prop("checked", false);
                        $('#CurrentTutor_AvailTuePM').prop("checked", false);
                        $('#CurrentTutor_AvailWedPM').prop("checked", false);
                        $('#CurrentTutor_AvailThuPM').prop("checked", false);
                        $('#CurrentTutor_AvailFriPM').prop("checked", false);
                        $('#CurrentTutor_AvailSatPM').prop("checked", false);
                        $('#CurrentTutor_AvailSunPM').prop("checked", false);
                        $('#CurrentTutor_AvailMonEVE').prop("checked", false);
                        $('#CurrentTutor_AvailTueEVE').prop("checked", false);
                        $('#CurrentTutor_AvailWedEVE').prop("checked", false);
                        $('#CurrentTutor_AvailThudEVE').prop("checked", false);
                        $('#CurrentTutor_AvailFriEVE').prop("checked", false);
                        $('#CurrentTutor_AvailSatEVE').prop("checked", false);
                        $('#CurrentTutor_AvailSunEVE').prop("checked", false);

                        $('#CurrentTutor_Transportation').val(data);
                        $('#CurrentTutor_TutorContact').val(data);
                        $('#CurrentTutor_SmokingPref').val(data);
                        $('#CurrentTutor_LocationPref').val(data);
                        $('#CurrentTutor_StudentSmoker').val(data);
                        $('#CurrentTutor_MedicalInfo').val(data);
                        $('#CurrentTutor_LocationPref2').val(data);
                        $('#CurrentTutor_LocationPref3').val(data);
                        $('#CurrentTutor_InterestHobbies').val(data);
                        $('#CurrentTutor_StudentPreference').val(data);
                        $('#CurrentTutor_SpecialInstructions').val(data);

                        fmt = "";
                        $('#CurrentTutor_FirstCalledByDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
                        $('#CurrentTutor_FirstCalledBy').val(data);
                        $('#CurrentTutor_HowHeard').val(data);

                    }
                    else {
                        $('#CurrentRecordIndex').val(data.CurrentRecordIndex);
                        $('#tutorPages').val(data.CurrentRecordIndex);
                        currentTutorId = data.CurrentTutor.ID;

                        $('#Tutor-Matching-T').jtable('load', { TID: currentTutorId });
                        $('#Tutor-Comments').jtable('load', { tutorId: currentTutorId });
                       // $('#Tutor-FollowUp').jtable('load', { tutorId: currentTutorId });

                        $('#CurrentTutor_ID').val(data.CurrentTutor.ID);
                        $('#CurrentTutor_Salutation').val(data.CurrentTutor.Salutation);
                        $('#CurrentTutor_FirstName').val(data.CurrentTutor.FirstName);
                        $('#CurrentTutor_LastName').val(data.CurrentTutor.LastName);
                        $('#CurrentTutor_Address1').val(data.CurrentTutor.Address1);
                        $('#CurrentTutor_Address2').val(data.CurrentTutor.Address2);
                        $('#CurrentTutor_City').val(data.CurrentTutor.City);
                        $('#CurrentTutor_State').val(data.CurrentTutor.State);
                        $('#CurrentTutor_Zip').val(data.CurrentTutor.Zip);
                        $('#CurrentTutor_HomeAreaCode').val(data.CurrentTutor.HomeAreaCode);
                        $('#CurrentTutor_HomePhone').val(data.CurrentTutor.HomePhone);
                        $('#CurrentTutor_WorkAreaCode').val(data.CurrentTutor.WorkAreaCode);
                        $('#CurrentTutor_WorkPhone').val(data.CurrentTutor.WorkPhone);
                        $('#CurrentTutor_WorkPhoneExt').val(data.CurrentTutor.WorkPhoneExt);
                        $('#CurrentTutor_FAXAreaCode').val(data.CurrentTutor.FAXAreaCode);
                        $('#CurrentTutor_FAX').val(data.CurrentTutor.FAX);
                        $('#CurrentTutor_CellAreaCode1').val(data.CurrentTutor.CellAreaCode1);
                        $('#CurrentTutor_CellPhone1').val(data.CurrentTutor.CellPhone1);
                        $('#CurrentTutor_CellAreaCode2').val(data.CurrentTutor.CellAreaCode2);
                        $('#CurrentTutor_CellAreaPhone2').val(data.CurrentTutor.CellAreaPhone2);
                        $('#CurrentTutor_ContactPref').val(data.CurrentTutor.ContactPref);
                        $('#CurrentTutor_EMail').val(data.CurrentTutor.EMail);
                        $('#CurrentTutor_Gender').val(data.CurrentTutor.Gender);
                        $('#CurrentTutor_Ethnicity').val(data.CurrentTutor.Ethnicity);
                        $('#CurrentTutor_Income').val(data.CurrentTutor.Income);
                        $('#CurrentTutor_Occupation').val(data.CurrentTutor.Occupation);
                        $('#CurrentTutor_Employer').val(data.CurrentTutor.Employer);
                        $('#CurrentTutor_EmployerStatus').val(data.CurrentTutor.EmployerStatus);
                        $('#CurrentTutor_EmergContact').val(data.CurrentTutor.EmergContact);
                        $('#CurrentTutor_EmergAreaCode').val(data.CurrentTutor.EmergAreaCode);
                        $('#CurrentTutor_EmergPhone').val(data.CurrentTutor.EmergPhone);
                        $('#CurrentTutor_CallLocation').val(data.CurrentTutor.CallLocation);

                        var fmt = $.fn.getFormattedDate(data.CurrentTutor.DOB);
                        $('#CurrentTutor_DOB').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                        $('#CurrentTutor_Country').val(data.CurrentTutor.Country);
                        $('#CurrentTutor_NativeLanguage').val(data.CurrentTutor.NativeLanguage);
                        $('#CurrentTutor_EducationLevel').val(data.CurrentTutor.EducationLevel);
                        $('#CurrentTutor_ReadWriteNativeLang').val(data.CurrentTutor.ReadWriteNativeLang);
                        $('#CurrentTutor_Referral').val(data.CurrentTutor.Referral);

                        fmt = $.fn.getFormattedDate(data.CurrentTutor.FingerPrintDate);
                        $('#CurrentTutor_FingerPrintDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                        $('#CurrentTutor_Staff').val(data.CurrentTutor.Staff);
                        $('#CurrentTutor_Source').val(data.CurrentTutor.Source);

                        fmt = $.fn.getFormattedDate(data.CurrentTutor.IntakeDate);
                        $('#CurrentTutor_IntakeDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
                    
                        fmt = $.fn.getFormattedDate(data.CurrentTutor.FirstActive);
                        $('#CurrentTutor_FirstActive').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                        if (data.CurrentTutor.Active == true) {
                            $('#CurrentTutor_Active').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_Active').prop("checked", false);
                        }

                        fmt = $.fn.getFormattedDate(data.CurrentTutor.ActiveDate);
                        $('#CurrentTutor_ActiveDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);

                        $('#CurrentTutor_Status').val(data.CurrentTutor.Status);
                        if (data.CurrentTutor.InActive == true) {
                            $('#CurrentTutor_InActive').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_InActive').prop("checked", false);
                        }
                        $('#CurrentTutor_Program').val(data.CurrentTutor.Program);
                        $('#CurrentTutor_MailCode').val(data.CurrentTutor.MailCode);
                        $('#CurrentTutor_Category').val(data.CurrentTutor.Category);
                        $('#CurrentTutor_Keyword').val(data.CurrentTutor.Keyword);

                        if (data.CurrentTutor.AvailMonAM == true) {
                            $('#CurrentTutor_AvailMonAM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailMonAM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailTueAM == true) {
                            $('#CurrentTutor_AvailTueAM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailTueAM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailWedAM == true) {
                            $('#CurrentTutor_AvailWedAM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailWedAM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailThuAM == true) {
                            $('#CurrentTutor_AvailThuAM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailThuAM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailFriAM == true) {
                            $('#CurrentTutor_AvailFriAM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailFriAM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailSatAM == true) {
                            $('#CurrentTutor_AvailSatAM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailSatAM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailSunAM == true) {
                            $('#CurrentTutor_AvailSunAM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailSunAM').prop("checked", false);
                        }

                        if (data.CurrentTutor.AvailTueAM == true) {
                            $('#CurrentTutor_AvailTueAM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailTueAM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailMonPM == true) {
                            $('#CurrentTutor_AvailMonPM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailMonPM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailTuePM == true) {
                            $('#CurrentTutor_AvailTuePM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailTuePM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailWedPM == true) {
                            $('#CurrentTutor_AvailWedPM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailWedPM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailThuPM == true) {
                            $('#CurrentTutor_AvailThuPM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailThuPM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailFriPM == true) {
                            $('#CurrentTutor_AvailFriPM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailFriPM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailSatPM == true) {
                            $('#CurrentTutor_AvailSatPM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailSatPM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailSunAM == true) {
                            $('#CurrentTutor_AvailSunPM').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailSunPM').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailMonEVE == true) {
                            $('#CurrentTutor_AvailMonEVE').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailMonEVE').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailTueEVE == true) {
                            $('#CurrentTutor_AvailTueEVE').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailTueEVE').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailWedEVE == true) {
                            $('#CurrentTutor_AvailWedEVE').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailWedEVE').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailThudEVE == true) {
                            $('#CurrentTutor_AvailThudEVE').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailThudEVE').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailFriEVE == true) {
                            $('#CurrentTutor_AvailFriEVE').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailFriEVE').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailSatEVE == true) {
                            $('#CurrentTutor_AvailSatEVE').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailSatEVE').prop("checked", false);
                        }
                        if (data.CurrentTutor.AvailSunEVE == true) {
                            $('#CurrentTutor_AvailSunEVE').prop("checked", true);
                        }
                        else {
                            $('#CurrentTutor_AvailSunEVE').prop("checked", false);
                        }

                        $('#CurrentTutor_Transportation').val(data.CurrentTutor.Transportation);
                        $('#CurrentTutor_TutorContact').val(data.CurrentTutor.TutorContact);
                        $('#CurrentTutor_SmokingPref').val(data.CurrentTutor.SmokingPref);
                        $('#CurrentTutor_LocationPref').val(data.CurrentTutor.LocationPref);
                        $('#CurrentTutor_StudentSmoker').val(data.CurrentTutor.StudentSmoker);
                        $('#CurrentTutor_MedicalInfo').val(data.CurrentTutor.MedicalInfo);
                        $('#CurrentTutor_LocationPref2').val(data.CurrentTutor.LocationPref2);
                        $('#CurrentTutor_LocationPref3').val(data.CurrentTutor.LocationPref3);
                        $('#CurrentTutor_InterestHobbies').val(data.CurrentTutor.InterestHobbies);
                        $('#CurrentTutor_StudentPreference').val(data.CurrentTutor.StudentPreference);
                        $('#CurrentTutor_SpecialInstructions').val(data.CurrentTutor.SpecialInstructions);

                        fmt = $.fn.getFormattedDate(data.CurrentTutor.FirstCalledByDate);
                        $('#CurrentTutor_FirstCalledByDate').datepicker({ dateFormat: '0:MM/dd/yyyy' }).datepicker('setDate', fmt);
                        $('#CurrentTutor_FirstCalledBy').val(data.CurrentTutor.FirstCalledBy);
                        $('#CurrentTutor_HowHeard').val(data.CurrentTutor.HowHeard);
                    }
 
                $.fn.TutorReportsHandler();
            };

            $.fn.getFormattedDate = function (date) {
                if (date == null)
                    return null;
                var dt = eval("new " + date.toString().replace(/[\\/]/g, ""));
                return new Date(dt);
            };


            $.fn.TutorReportsHandler = function() {
                if (document.getElementById("runTutorReports") != null) {
                    var selectedTutorReport = $("#SelectedTutorReport").val();

                    if (selectedTutorReport == '') {
                        document.getElementById("runTutorReports").style.display = "none";
                    }
                    else {
                        document.getElementById("runTutorReports").style.display = "block";
                    }

                    if (selectedTutorReport == 'aaaa') {
                        document.getElementById("TutorReportsViewStartDateRangeLabel").style.display = "block";
                        document.getElementById("TutorReportsViewEndDateRangeLabel").style.display = "block";
                        document.getElementById("TutorReportsStartDate").style.display = "block";
                        document.getElementById("TutorReportsEndDate").style.display = "block";
                    }
                    else {
                        document.getElementById("TutorReportsViewStartDateRangeLabel").style.display = "none";
                        document.getElementById("TutorReportsViewEndDateRangeLabel").style.display = "none";
                        document.getElementById("TutorReportsStartDate").style.display = "none";
                        document.getElementById("TutorReportsEndDate").style.display = "none";
                    }
                }
            };

            // this is to care care of the case of after a "save" is executed
            if ($('#CurrentTutor_ID').val() > 0)
            {
                $('#Tutor-Matching-T').jtable('load', { TID: $('#CurrentTutor_ID').val() });
                //$('#Tutor-Children').jtable('load', { studentId: $('#CurrentTutor_ID').val() });
                //$('#Tutor-Comments').jtable('load', { studentId: $('#CurrentTutor_ID').val() });
                //$('#Tutor-FollowUp').jtable('load', { studentId: $('#CurrentTutor_ID').val() });
            }   

            $('#tutorPages').keypress(function (event) {
                if (event.keyCode == 13) {
                    //alert($('#tutorPages').val());
                    $.ajax({
                        url: '@Url.Content("~/Tutor/TutorByRecIndex")',
                        type: 'get',
                        cache: false,
                        async: false,      // IMPORTANT to have this statement. If not the Home/Index will be called and the result is we'll have an empty form.
                        data: { recIndex: $('#tutorPages').val(), activeOnly: $('#ActiveOnly').is(':checked'), byLastName: $("#ByLastName").val() },
                    }).done(function (data) {
                        // alert('done');
                    }).complete(function () {
                        // alert("complete");
                    }).success(function (data) {
                        //alert('success');
                        //$('#EditMode').val("edit");

                        $.fn.populateTutorForm(data);

                        //synch the search student profiles boxes
                        var byLastName = $("#ByLastName").val();
                        if (byLastName == "True" || byLastName == "true") {
                            var name = data.CurrentTutor.LastName + ", " + data.CurrentTutor.FirstName;
                            $("#TutorListLastName").select2("val", name);
                            $('#SelectedLastNameId').val(data.CurrentTutor.ID);
                            $('#SelectedLastName').val(name);
                        }
                        else {
                            var name = data.CurrentTutor.FirstName + " " + data.CurrentTutor.LastName;
                            $("#TutorListFirstName").select2("val", name);
                            $('#SelectedFirstNameId').val(data.CurrentTutor.ID);
                            $('#SelectedFirstName').val(name);
                        }

                        // MUST reload the date picker in order for it to work AFTER coming back from calling the Partial View.
                        $(".datefield").datepicker();
                    }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                        var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                        alert("There was an error calling editTutor: " + errorMessage);
                    });
                }

            });

        });  // $(document).ready()
    </script>
}