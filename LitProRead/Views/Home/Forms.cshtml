@model LitProRead.ViewModels.StudentFormViewModel

@{
    ViewBag.Title = "Home Page";
    var currStudentId = 0;
}
<div id="tabs">

    <ul>
        <li><a href="#tabs-Students">Students</a></li>
        <li><a href="#tabs-Tutors">Tutors</a></li>
        <li><a href="#tabs-All-Pairs">All Pairs</a></li>
        <li><a href="#tabs-Classes-Training">Classes/Training</a></li>
        <li><a href="#tabs-Small-Groups">Small Groups</a></li>
        <li><a href="#tabs-Volunteers">Volunteers</a></li>
        <li><a href="#tabs-Contacts">Contacts</a></li>
        <li><a href="#tabs-Donors">Donors</a></li>
        <li><a href="#tabs-Maintenance">Maintenance</a></li>
    </ul>

    @* ----------------------------------------------------- *@
    <div id="tabs-Students">


        <form id="studentform" method="post" action="@Url.Action("Forms")" 
            data-otf-ajax="true" data-otf-target="#Student-General">
            <table style="width: 100%; border:0 none; table-layout: fixed; border-collapse: separate">
                <colgroup>
                        <col style="width:20%;"/>
                        <col style="width:20%;"/>
                        <col style="width:20%;"/>
                        <col style="width:20%;"/>
                        <col style="width:20%;"/>
                </colgroup>
                <tr>
                    <td style="text-align:right; border:0 none;">Last Name
                    </td>
                    <td style="text-align:left; border:0 none;">
                        @Html.DropDownListFor(x => Model.studentVM.StudentListLastName, Model.studentVM.StudentListLastName, new { style = "width: 250px;", @onchange="onStudentLastNameChange(this.options[this.selectedIndex].value);" })
                    </td>
                    <td style="text-align:right; border:0 none;">First Name
                    </td>
                    <td style="text-align:left; border:0 none;">
                        @Html.DropDownListFor(x => Model.studentVM.StudentListFirstName, Model.studentVM.StudentListFirstName, htmlAttributes: new { style = "width: 250px;", @onchange="onStudentFirstNameChange(this.options[this.selectedIndex].value);" })
                    </td>
                </tr>

                <tr>
                    <td colspan="5" style="text-align:center">
                        <button type="button" id="refreshStudent">Refresh</button>
                        <button type="button" id="addStudent">Add</button>
                        <button type="button" id="editStudent">Edit</button>
                        <button type="button" id="deleteStudent">Delete</button>
                        <button type="button" id="saveStudent">Save</button>
                        <button type="button" id="printStudent">Print</button>

                    </td>
                </tr>
            </table>
            @*
        @Html.ListBoxFor(x => Model.studentVM.StudentListFirstName, Model.studentVM.StudentListFirstName, new { @class = "chosen", Style = "width: 150px;" })
            @Html.DropDownListFor(x => Model.studentVM.StudentListFirstName, Model.studentVM.StudentListFirstName, "select", new { @ID = "ddlCountry", @class = "chosen-select", Style = "width: 150px;" })
            
            
                ,new { @class = "chzn-select", data_placeholder = "Choose  Countries..." })
            @Html.DropDownListFor("", new SelectList(Model.Departments, "DepartmentId", "Name"), string.Empty)
            <input type="search" name="searchTerm" data-otf-autocomplete="@Url.Action("Autocomplete")" />
            <input type="submit" value="Search" />
            *@

            
        </form>
        
        <hr>

       <ul>
            <li><a href="#tabs-General">General</a></li>
            <li><a href="#tabs-Preferences">Preferences</a></li>
            <li><a href="#tabs-Matching-S">Matching-S</a></li>
            <li><a href="#tabs-Children">Children</a></li>
            <li><a href="#tabs-Computer">Computer</a></li>
            <li><a href="#tabs-Assessment-Intake">Assessment Intake</a></li>
            <li><a href="#tabs-Assessment-Goals">Assessment Goals</a></li>
            <li><a href="#tabs-Roles-and-Goals">Roles and Goals</a></li>
            <li><a href="#tabs-Accomplishements">Accomplishements</a></li>
            <li><a href="#tabs-Comments">Comments</a></li>
            <li><a href="#tabs-FollowUp">FollowUp</a></li>
            <li><a href="#tabs-Status-History">Status History</a></li>
        </ul>


        <div id="tabs-General">
        @Html.Partial("../Student/_Student-View", Model.studentVM.CurrentStudent) 
        </div>
       
        <div id="tabs-Matching-S">
            Matching-S
        </div>
       
        <div id="tabs-Preferences">
            Preferences
        </div>
       
        <div id="tabs-Children">
            Children
        </div>
       
        <div id="tabs-Computer">
            Computer
        </div>
       
        <div id="tabs-Assessment-Intake">
            Assessment-Intake
        </div>
       
        <div id="tabs-Assessment-Goals">
            Assessment-Goals
        </div>
       
        <div id="tabs-Roles-and-Goals">
            Roles-and-Goals
        </div>
       
        <div id="tabs-Accomplishements">
            Accomplishements
        </div>
       
        <div id="tabs-Comments">
            Comments
        </div>
       
        <div id="tabs-FollowUp">
            FollowUp
        </div>
       
        <div id="tabs-Status-History">
            Status-History
        </div>
    </div>

    @* ----------------------------------------------------- *@
    <div id="tabs-Tutors">
        Tutors
    </div>

    <div id="tabs-All-Pairs">
        All-Pairs
    </div>

    <div id="tabs-Classes-Training">
        Classes-Training
    </div>

    <div id="tabs-Small-Groups">
        Small-Groups
    </div>

    <div id="tabs-Volunteers">
        Volunteers
    </div>

    <div id="tabs-Contacts">
        Contacts
    </div>

    <div id="tabs-Donors">
        Donors
    </div>

    <div id="tabs-Maintenance">
        Maintenance
    </div>
    , 
</div>


@section scripts
{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/select2.css")"/>  
    <script type="text/javascript" src="@Url.Content("~/Scripts/select2.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/toDictionary.js")"></script>

     @*
   There are two ways.
    First one is the common way that serializes your form (when your ViewModel data is presented in the view as a form). Ajax call will likely be issued within form submit handler (meaning that this will refer to form DOM element):

    $.ajax({ ..., data: $(this).serialize(), ...});

    As you can see, there's no use of toDictionary in this case because most of the things will work out of the box. Vast majority of forms aren't dynamic so they don't just add additional fields to them.

    Second way is less common and uses a JSON object and posts back that one. In this case there's no completely direct way of providing your server-side ViewModel on the client (unless you JSON-encode it and send it within the view). So when you want your actual ViewModel instance to access on the client then supposedly JSON encode it and put it i.e. as an attribute on some element that represents your model. All you'd have to do afterwards is to
    1. read that data,
    2. create Javascript instance of this JSON object
    3. manipulate it
    4. serialize it and send it back to server

    var model = $.parseJSON($("#someEl").data("view-model-data"));
    //manipulate model
    $.ajax({ ..., data: $.toDictionary(model),... });
    *@

    <script type="text/javascript">
        function onStudentLastNameChange(value) {
            currStudentId = value;
            //alert(currStudentId);
        }
    </script>
    
    <script type="text/javascript">
        function onStudentFirstNameChange(value) {
            currStudentId = value;
            //alert(currStudentId);
        }
    </script>

    <script>
        $(function () {
            $("#tabs").tabs();
            $("#tabs-Students").tabs();

            $("#studentVM_StudentListLastName").select2();
            //$("#studentVM_StudentListLastName").on("change", function (e) {
            //    currStudentId = $('#studentVM_StudentListLastName').val;
           //     alert(currStudentId);
           // });

            $("#studentVM_StudentListFirstName").select2();
       });
    </script>

    <script type="text/javascript">

        $('#addStudent').click(function () {
            alert("addStudent");
            var firstName = $('#studentVM_StudentListFirstName').val;
            var lastName = $('#studentVM_StudentListLastName').val;
            alert("Last: " + lastName + ", " + "First: " + firstName);
            @*
            var studentvm = @(Model.studentVM);//$("form").serialize();
            $.ajax({
                url: '@Url.Content("~/Student/Add")',
                 type: 'get',
                 cache: false,
                 data: $.toDictionary(studentvm, "studentvm"),
                 contentType: 'application/json; charset=utf-8',
                 @ *
                data: { Command: "approve", lastName: last, firstName: first },
                 * @
             }).done(function () {
                 alert("done");

             }).complete(function () {
                 alert("complete");
             }).success(function (dv) {
                 alert("success");
             }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                 var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                 alert("There was an error calling editStudent: " + errorMessage);
             });
            *@
        });

        $('#editStudent').click(function () {
            //alert("editStudent");
            //var m = $("form").serialize();
            //alert(m);
             $.ajax({
                url: '@Url.Content("~/Student/Edit")',
                 type: 'get',
                 cache: false,
                 data: { id: currStudentId },       //{ studentvm: m }  ---- $.toDictionary(m, "studentvm"),
                 @*
                 contentType: 'application/json; charset=utf-8',
               data: { Command: "approve", lastName: last, firstName: first },
                 *@
                 }).done(function (data) {
                     //alert(data);
                     $("#Student-General").replaceWith(data);
                 }).complete(function (){
                     //alert("complete");
                 }).success(function (dv) {
                    // alert("success");
                 }).error(function (xhr, errorType, exception) { //Triggered if an error communicating with server  
                     var errorMessage = exception || xhr.statusText; //If exception null, then default to xhr.statusText  
                     alert("There was an error calling editStudent: " + errorMessage);
                 });
        });
    </script>
}