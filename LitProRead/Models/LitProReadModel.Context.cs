//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LitProRead.Extensions;

namespace LitProRead.Models
{
    using LitProRead.BusinessObjects;
    using LitProRead.ViewModels;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    //using LitProRead.Extensions;

    
    public partial class LitProReadEntities : DbContext
    {
        public LitProReadEntities()
            : base("name=LitProReadEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public IQueryable<Student> IStudents { get; set; }

        //Return only the results we want
        public List<Student> GetStudents(bool ActiveOnly, string searchTerm, int pageSize, int pageNum, bool byLastName)
        {
            return GetStudentsQuery(ActiveOnly, searchTerm, byLastName)
                .Skip(pageSize * (pageNum - 1))
                .Take(pageSize)
                .ToList();
        }

        //And the total count of records
        public int GetStudentsCount(bool ActiveOnly, string searchTerm, int pageSize, int pageNum)
        {
            return GetStudentsQuery(ActiveOnly, searchTerm, true)
                .Count();
        }

        public int StudentIdByRecIndex(int recIndex, bool activeOnly, bool byLastName)
        {
            Student[] list = GetStudentsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            if (cnt <= 0)
                return 0;

            if (recIndex <= 0)
                return list[0].ID;

            if (recIndex >= cnt)
            {
                return list[cnt-1].ID;
            }

            return list[recIndex].ID; ;
        }

        public int FirstStudentId(int currStudentId, bool activeOnly, bool byLastName, ref int recIndex)
        {
            int studentId = currStudentId;
            Student[] list = GetStudentsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            if (cnt > 0)
                studentId = list[0].ID;
            recIndex = 1;

            return studentId;
        }

        public int LastStudentId(int currStudentId, bool activeOnly, bool byLastName, ref int recIndex)
        {
            int studentId = currStudentId;
            Student[] list = GetStudentsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            if (cnt > 0)
                studentId = list[cnt - 1].ID;
            recIndex = cnt;

            return studentId;
        }

        public int NextStudentId(int currStudentId, bool activeOnly, bool byLastName, ref int recIndex)
        {
            int nextStudentId = 0;
            Student[] list = GetStudentsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            if (cnt == 0)
            {
                recIndex = 0;
                return nextStudentId;
            }
            for (int currIndex = 0; currIndex < cnt; currIndex++)
            {
                if (list[currIndex].ID == currStudentId)
                {
                    int nextIndex = 0;
                    if (currIndex == cnt - 1)   // at end of list
                    {
                        nextStudentId = currStudentId;
                        nextIndex = currIndex;
                    }
                    else
                    {
                        nextStudentId = list[currIndex + 1].ID;
                        nextIndex = currIndex + 1;
                    }
                    recIndex = nextIndex + 1;
                    return nextStudentId;
                }
            }
            recIndex = 0;
            return list[recIndex].ID; 
        }

        public int PrevStudentId(int currStudentId, bool activeOnly, bool byLastName, ref int recIndex)
        {
            int prevStudentId = 0;
            Student[] list = GetStudentsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            if (cnt == 0)
            {
                recIndex = 0;
                return prevStudentId;
            }

            for (int currIndex = 0; currIndex < cnt; currIndex++)
            {
                if (list[currIndex].ID == currStudentId)
                {
                    int nextIndex = 0;
                    if (currIndex == 0) // at top of list
                    {
                        prevStudentId = currStudentId;
                        nextIndex = currIndex;
                    }
                    else
                    {
                        prevStudentId = list[currIndex - 1].ID;
                        nextIndex = currIndex - 1;
                    }
                    recIndex = nextIndex + 1;
                    return prevStudentId;
                }
            }
            recIndex = 0;
            return list[recIndex].ID;
        }

        public Student GetStudent(int studentId, bool activeOnly, bool byLastName, ref int recIndex)
        {
            Student[] list = GetStudentsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            for (int currIndex = 0; currIndex < cnt; currIndex++)
            {
                if (list[currIndex].ID == studentId)
                {
                    recIndex = currIndex + 1;
                    return list[currIndex];
                }
            }
            return null;
        }

        //Our search term
        private IQueryable<Student> GetStudentsQuery(bool ActiveOnly, string searchTerm, bool byLastName)
        {
            searchTerm = searchTerm.ToLower();
            if (byLastName)
            {
                if (ActiveOnly)
                    return Students
                        .Where(
                            a =>
                            a.LastName.StartsWith(searchTerm) && a.Active == true
                        ).OrderBy(a => a.LastName).ThenBy(a => a.FirstName);
                else
                     return Students
                        .Where(
                            a =>
                            a.LastName.StartsWith(searchTerm)
                        ).OrderBy(a => a.LastName).ThenBy(a => a.FirstName);
           }
           else
           {
                if (ActiveOnly)
                    return Students
                    .Where(
                        a =>
                        a.FirstName.StartsWith(searchTerm) && a.Active == true
                    ).OrderBy(a => a.FirstName).ThenBy(a => a.LastName);
                else
                    return Students
                    .Where(
                        a =>
                        a.FirstName.StartsWith(searchTerm)
                    ).OrderBy(a => a.FirstName).ThenBy(a => a.LastName);
            }
        }


        public List<PairViewModel> GetMatchedTutorForStudent(int studentID, int pageSize, int pageNum, string sort, ref int matchCount)
        {
            var stuStatus = Students.Find(studentID).Status;
            var pairs = 
                from pair in Pairs
                where pair.SID == studentID
                join tutor in Tutors on pair.TID equals tutor.ID //into pt 
                //from p in pt.DefaultIfEmpty() 
                select new { SID = studentID,
                             TID = pair.TID,
                            TutorLastName = tutor.LastName,
                            TutorFirstName = tutor.FirstName,
                            TStatus = tutor.Status,
                            SStatus = stuStatus,
                            MatchDate = pair.MatchDate,
                            DissolveDate = pair.DissolveDate,
                            PairStatus = pair.PairStatus,
                            PairStatusDate = pair.PairStatusDate,
                            PairProgram = pair.PairProgram,
                            DateCreated = pair.DateCreated,
                            DateModified = pair.DateModified,
                            LastModifiedBy = pair.LastModifiedBy,
                            SSMA_TimeStamp = pair.SSMA_TimeStamp,
                            UniqID = pair.UniqID,
                            Comments = pair.Comments
                };

            matchCount = pairs.Count();

            // get the Total Hours Met for the Tutors.
            var query = pairs.GroupJoin(PairHours,
                                              p => p.UniqID,
                                              ph => ph.PairHours,
                                              (d, t) => new
                                              {
                                                  UniqID = d.UniqID,
                                                  SID = d.SID,
                                                  TID = d.TID,
                                                  TutorLName = d.TutorLastName,
                                                  TutorFName = d.TutorFirstName,
                                                  MatchDate = d.MatchDate,
                                                  PairStatus = d.PairStatus,
                                                  DissolveDate = d.DissolveDate,
                                                  PairStatusDate = d.PairStatusDate,
                                                  PairProgram = d.PairProgram,
                                                  DateCreated = d.DateCreated,
                                                  DateModified = d.DateModified,
                                                  LastModifiedBy = d.LastModifiedBy,
                                                  SSMA_TimeStamp = d.SSMA_TimeStamp,
                                                  TStatus = d.TStatus,
                                                  SStatus = d.SStatus,     
                                                  Comments = d.Comments,
                                                  TotalHoursMet = t.Sum(x => x.HoursMet)
                                              });

            if (string.IsNullOrEmpty(sort) || sort.Equals("DateCreated ASC"))
            {
                query = query.OrderBy(p => p.DateCreated);
            }
            else if (sort.Equals("DateCreated DESC"))
            {
                query = query.OrderByDescending(p => p.DateCreated);
            }

            // consolidate results.
            List<PairViewModel> list = new List<PairViewModel>();
            foreach (var pair in query)
            {
                int pairStatusId = GetStatusId(pair.PairStatus);
                int tStatusId = GetStatusId(pair.TStatus);
                int sStatusId = GetStatusId(pair.SStatus);
                list.Add(new PairViewModel
                {
                    UniqID = pair.UniqID,
                    SID = pair.SID,
                    TID = pair.TID,
                    TutorLName = pair.TutorLName,
                    TutorFName = pair.TutorFName,
                    MatchDate = pair.MatchDate,
                    DissolveDate = pair.DissolveDate,
                    PairStatusID = pairStatusId,
                    PairStatusDate = pair.PairStatusDate,
                    PairProgram = pair.PairProgram,
                    DateCreated = pair.DateCreated,
                    DateModified = pair.DateModified,
                    LastModifiedBy = pair.LastModifiedBy,
                    SSMA_TimeStamp = pair.SSMA_TimeStamp,
                    TStatusID = tStatusId,
                    SStatusID = sStatusId,
                    Comments = pair.Comments,
                    TotalHoursMet = pair.TotalHoursMet
                });
            }

            if (pageSize > 0)
            {
                IEnumerable <PairViewModel> retList = list.AsEnumerable();
                return retList.Skip(pageNum).Take(pageSize).ToList();
            }
            else
                return list;
        }

        public List<StudentChildrenViewModel> GetStudentChildren(int id)
        {
            var query = from c in StudentChildrens
                        where c.ID == id
                        select c;

            if (query.Count() == 0)
                return new List<StudentChildrenViewModel>();

            List<StudentChildrenViewModel> list = new List<StudentChildrenViewModel>();
            foreach (var item in query)
            {
                int genderId = GetGenderId(item.Gender);
                int ethnicityId = GetEthnicityId(item.Ethnicity);
                int relationshipId = GetChildRelationshipId(item.ChildRelationship);
                list.Add(new StudentChildrenViewModel
                {
                    AutoNum = item.AutoNum,
                    ID = item.ID,
                    ChildName = item.ChildName,
                    DOB = item.DOB,
                    GenderID = genderId,
                    EthnicityID = ethnicityId,
                    LiveWithAdult = item.LiveWithAdult,
                    ChildRelationshipID = relationshipId,
                    Comments = item.Comments,
                    SSMA_TimeStamp = item.SSMA_TimeStamp
                });
            }

            return list;
        }

        public List<StudentCommentsViewModel> GetStudentComments(int id)
        {
            var query = from c in StudentComments
                        where c.ID == id
                        select c;

            if (query.Count() == 0)
                return new List<StudentCommentsViewModel>();

            List<StudentCommentsViewModel> list = new List<StudentCommentsViewModel>();
            foreach (var item in query)
            {
                list.Add(new StudentCommentsViewModel
                {
                    ID = item.ID,
                    CommentDate = item.CommentDate,
                    Comment = item.Comment,
                    SSMA_TimeStamp = item.SSMA_TimeStamp
                });
            }

            return list;
        }

        public List<StudentFollowUpViewModel> GetStudentFollowUps(int id)
        {
            var query = from c in StudentFollowUps
                        where c.ID == id
                        select c;

            if (query.Count() == 0)
                return new List<StudentFollowUpViewModel>();

            List<StudentFollowUpViewModel> list = new List<StudentFollowUpViewModel>();
            foreach (var item in query)
            {
                list.Add(new StudentFollowUpViewModel
                {
                    New = false,        // not a new FollowUp record
                    UniqID = item.UniqID,
                    ID = item.ID,
                    FollowUpDate = item.FollowUpDate,
                    FollowUpDesc = item.FollowUpDesc,
                    DateCreated = item.DateCreated,
                    DateModified = item.DateModified,
                    LastModifiedBy = item.LastModifiedBy
                });
            }

            return list;
        }

        /**
         using (SFA2DBDataContext db = new SFA2DBDataContext())
            {
                var foo = from a in db.KitItems
                          join b in db.PackageKits on a.KitID equals b.KitID
                          join c in db.BundlePackages on b.PackageID equals c.PackageID
                          join d in db.BuilderOverrideBundlePackageKitItems on 
                          new { doo=a.ID, goo=b.ID }
                          equals new { doo=d.KitItemID, goo=d.PackageKitID }
                          select new
                          {
                              a.ItemID,a.KitID,b.PackageID,c.BundleID,
                              Commish = d.BuilderCommission ?? a.Item.BuilderCommissionPercent
                          };
            }
         * 
         *===========================================================
         *
        SELECT PairHours.DateMet, PairHours.HoursMet, 
        Tutors.FirstName & " " & Tutors.LastName AS TutorName, Students.FirstName & " " & Students.Lastname AS StudentName, 
        Pairs.DissolveDate, PairHours.Activity, Pairs.PairStatus, Pairs.MatchDate, 
        IIf(IsNull([DissolveDate]),
        DateDiff("m",[MatchDate],Now()),
        DateDiff("m",[MatchDate],[DissolveDate])) AS MthofSvc, 
        Pairs.PairProgram, Pairs.PairStatusDate

        FROM Students RIGHT JOIN ((Tutors RIGHT JOIN Pairs ON Tutors.ID = Pairs.TID) RIGHT JOIN PairHours ON Pairs.UniqID = PairHours.PairHours) ON Students.ID = Pairs.SID
        WHERE (((PairHours.DateMet) Between [Forms]![frmDateSelectionPairStatus]![BeginDate] And [Forms]![frmDateSelectionPairStatus]![EndDate]));
         */
        public List<PairHoursViewModel> GetPairHoursForStudentAndTutor(int studentID, int tutorID, int pageSize, int pageNum, string sort, ref int matchCount)
        {
            //var stuStatus = Students.Find(studentID).Status;
            //var result = from t in ints1
            //             join x in ints2 on (t + 1) equals x
            //             select t;

            //var pairs =
            //    from student in Students
            //    join
            //        (from tutor in Tutors
            //        join pair in Pairs on tutor.ID equals pair.TID)
            //    on student.ID equals pair.SID
            //select new { pair.DateMet };

            //    where pairHour.SID == studentID && pairHour.TID == tutorID


            var query =
                from pair in Pairs
                where pair.SID == studentID && pair.TID == tutorID
                select pair into pairGrp

                join pairHour in PairHours on pairGrp.UniqID equals pairHour.PairHours into pairPairHours

                from p in pairPairHours.DefaultIfEmpty()

                select p;
                //select new
                //{
                //    p.UniqID,
                //    p.PairHours,
                //    p.DateMet,
                //    p.HoursMet,
                //    p.Activity
                //};

            matchCount = query.Count();


            if (string.IsNullOrEmpty(sort) || sort.Equals("DateMet ASC"))
            {
                query = query.OrderBy(p => p.DateMet);
            }
            else if (sort.Equals("DateMet DESC"))
            {
                query = query.OrderByDescending(p => p.DateMet);
            }

            List<PairHoursViewModel> list = new List<PairHoursViewModel>();
            if (query.First() != null)
            {
                foreach (var pairHr in query)
                {
                    int activityId = GetActivityId(pairHr.Activity);
                    list.Add(new PairHoursViewModel
                    {
                        UniqID = pairHr.UniqID,
                        PairHours = pairHr.PairHours,
                        DateMet = pairHr.DateMet,
                        HoursMet = pairHr.HoursMet,
                        ActivityID = activityId,   //pair.Activity
                    });
                }
            }

            if (pageSize > 0)
            {
                IEnumerable<PairHoursViewModel> retList = list.AsEnumerable();
                return retList.Skip(pageNum).Take(pageSize).ToList();
            }
            else
                return list;
        }


        public List<StudentStatsBO> GetStudentStats(string beginDate, string endDate, string status)
        {
            DateTime date1;
            if (beginDate != "")
            {
                date1 = DateTime.ParseExact(beginDate, @"M/d/yyyy", System.Globalization.CultureInfo.InvariantCulture);       //Parse(beginDate);
            }
            else
            {
                date1 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            }

            DateTime date2;
            if (endDate != "")
            {
                date2 = DateTime.ParseExact(endDate, @"M/dd/yyyy", System.Globalization.CultureInfo.InvariantCulture);       //Parse(endDate);
            }
            else
            {
                int currMonth = DateTime.Now.Month;
                int day = 31;
                switch(currMonth)
                {
                    case 2:
                        day = 28;
                        break;
                    case 4:
                    case 6:
                    case 10:
                    case 12:
                        day = 30;
                        break;
                }
                date2 = new DateTime(DateTime.Now.Year, currMonth, day);
            }

            DateTime today = DateTime.Today;

            int ubUnknown = 15;
            int lbUnknown = 1;
            DateTime minUnknown = today.AddYears(-ubUnknown);
            DateTime maxUnknown = today.AddYears(-lbUnknown);

            int ub10 = 19;
            int lb10 = 16;
            DateTime min10 = today.AddYears(-ub10);
            DateTime max10 = today.AddYears(-lb10);

            int ub20 = 29;
            int lb20 = 20;
            DateTime min20 = today.AddYears(-ub20);
            DateTime max20 = today.AddYears(-lb20);

            int ub30 = 39;
            int lb30 = 30;
            DateTime min30 = today.AddYears(-ub30);
            DateTime max30 = today.AddYears(-lb30);

            int ub40 = 49;
            int lb40 = 40;
            DateTime min40 = today.AddYears(-ub40); //12/24/1964
            DateTime max40 = today.AddYears(-lb40); //12/24/1973

            int ub50 = 59;
            int lb50 = 50;
            DateTime min50 = today.AddYears(-ub50);
            DateTime max50 = today.AddYears(-lb50);

            int ub60 = 69;
            int lb60 = 60;
            DateTime min60 = today.AddYears(-ub60);
            DateTime max60 = today.AddYears(-lb60);

            int ub70 = 999;
            int lb70 = 70;
            DateTime min70 = today.AddYears(-ub70);
            DateTime max70 = today.AddYears(-lb70);

            var query = from student in Students
                       //where status.Contains(student.Status)
                       //let Age = System.Data.Objects.SqlClient.SqlFunctions.DateDiff("month", student.DOB, DateTime.Now) / 12
                       select new
                       {
                           Count_Asian = Students.Count(n => n.Ethnicity == "Asian" && n.FirstActive >= date1 && n.FirstActive <= date2),
                           Count_Black = Students.Count(n => n.Ethnicity == "Black" && n.FirstActive >= date1 && n.FirstActive <= date2),
                           Count_Latino = Students.Count(n => n.Ethnicity == "Hispanic" && n.FirstActive >= date1 && n.FirstActive <= date2),
                           Count_NativeAmerican = Students.Count(n => n.Ethnicity == "Native American" && n.FirstActive >= date1 && n.FirstActive <= date2),
                           Count_PacificIslander = Students.Count(n => n.Ethnicity == "Pacific Islander" && n.FirstActive >= date1 && n.FirstActive <= date2),
                           Count_White = Students.Count(n => n.Ethnicity == "White" && n.FirstActive >= date1 && n.FirstActive <= date2),
                           Count_Other = Students.Count(n => n.Ethnicity == "Other" && n.FirstActive >= date1 && n.FirstActive <= date2),
                           Count_Unknown = Students.Count(n => n.Ethnicity == "Unknown" && n.FirstActive >= date1 && n.FirstActive <= date2),

                           //Count_Age_Unknown = Students.Count(n => n.DOB != null && n.DOB >= minUnknown && n.DOB <= maxUnknown
                           //                                  && n.FirstActive >= date1 && n.FirstActive <= date2),
                           ////Count_16_19 = Students.Count(n => (System.Data.Objects.SqlClient.SqlFunctions.DateDiff("month", n.DOB, DateTime.Now) / 12) >= 16 && (System.Data.Objects.SqlClient.SqlFunctions.DateDiff("month", n.DOB, DateTime.Now) / 12) <= 19),
                           //Count_20_29 = Students.Count(n => n.DOB != null && n.DOB >= min20 && n.DOB <= max20
                           //                               && n.FirstActive >= date1 && n.FirstActive <= date2),
                           //Count_30_39 = Students.Count(n => n.DOB != null && n.DOB >= min30 && n.DOB <= max30
                           //                               && n.FirstActive >= date1 && n.FirstActive <= date2),
                           //Count_40_49 = Students.Count(n => n.DOB != null && n.DOB >= min40 && n.DOB <= max40
                           //                              && n.FirstActive >= date1 && n.FirstActive <= date2),
                           //Count_50_59 = Students.Count(n => n.DOB != null && n.DOB >= min50 && n.DOB <= max50
                           //                               && n.FirstActive >= date1 && n.FirstActive <= date2),
                           //Count_60_69 = Students.Count(n => n.DOB != null && n.DOB >= min60 && n.DOB <= max60
                           //                               && n.FirstActive >= date1 && n.FirstActive <= date2),
                           //Count_70 = Students.Count(n => n.DOB != null && n.DOB >= min70 && n.DOB <= max70
                           //                                  && n.FirstActive >= date1 && n.FirstActive <= date2),

                           //Count_Male = Students.Count(n => n.Gender == "Male" && n.FirstActive >= date1 && n.FirstActive <= date2),
                           //Count_Female = Students.Count(n => n.Gender == "Female" && n.FirstActive >= date1 && n.FirstActive <= date2),
                           //Count_Gender_Unknown = Students.Count(n => n.Gender == null && n.FirstActive >= date1 && n.FirstActive <= date2),
                       };

            List<StudentStatsBO> list = new List<StudentStatsBO>();
            return list;
        }


        //******************** PAIRS *************************************************

        //SELECT Students.FirstName, Students.LastName, Tutors.FirstName, Tutors.LastName, Pairs.*, 
        //IIf(IsNull([DissolveDate]),DateDiff("m",[MatchDate],Now()),DateDiff("m",[MatchDate],[DissolveDate])) AS MthofSvc, 
        //students.HomeAreaCode & " " & Students.HomePhone AS StudentHome, 
        //Students.WorkAreaCode & " " & Students.WorkPhone AS StudentWork, 
        //Tutors.HomeAreaCode & " " & Tutors.HomePhone AS TutorHome, 
        //Tutors.WorkAreaCode & " " & Tutors.WorkPhone AS TutorWork, 
        //Tutors.TutorContact, 
        //Students.Status, 
        //Tutors.Status
        //FROM Students INNER JOIN (Tutors INNER JOIN Pairs ON Tutors.ID = Pairs.TID) ON Students.ID = Pairs.SID;
        public List<PairViewModel> GetAllPairs()
        {
            var query =
                from pair in Pairs
               // where pair.SID == studentID && pair.MatchDate >= date1 && pair.MatchDate <= date2
                join tutor in Tutors on pair.TID equals tutor.ID //into pt 
                //from p in pt
                join student in Students on pair.SID equals student.ID
                select new PairViewModel
                {
                    UniqID = pair.UniqID,
                    DateCreated = pair.DateCreated,
                    TID = pair.TID,
                    SID = pair.SID,

                    Comments = pair.Comments,
                    DateModified = pair.DateModified,
                    DissolveDate = pair.DissolveDate,
                    LastModifiedBy = pair.LastModifiedBy,
                    MatchDate = pair.MatchDate,
                    PairProgram = pair.PairProgram,
                    PairStatus = pair.PairStatus,
                    PairStatusDate = pair.PairStatusDate,
                    //TotalHoursMet = t.Sum(x => x.HoursMet)

                    StudentLName = student.LastName,
                    StudentFName = student.FirstName,
                    StudentHome = student.HomeAreaCode + " " + student.HomePhone,
                    StudentWork = student.WorkAreaCode + " " + student.WorkPhone,
                    StudentStatus = student.Status,

                    TutorLName = tutor.LastName,
                    TutorFName = tutor.FirstName,
                    TutorHome = tutor.HomeAreaCode + " " + tutor.HomePhone,
                    TutorWork = tutor.WorkAreaCode + " " + tutor.WorkPhone,
                    TutorStatus = tutor.Status,
                    TutorContact = tutor.TutorContact
                };
            return query.ToList();
        }

        //SELECT PairHours.DateMet, PairHours.HoursMet, Tutors.FirstName & " " & Tutors.LastName AS TutorName, Students.FirstName & " " & Students.Lastname AS StudentName, Pairs.DissolveDate, PairHours.Activity, Pairs.PairStatus, Pairs.MatchDate, IIf(IsNull([DissolveDate]),DateDiff("m",[MatchDate],Now()),DateDiff("m",[MatchDate],[DissolveDate])) AS MthofSvc, Pairs.PairProgram, Pairs.PairStatusDate
        //FROM Students RIGHT JOIN ((Tutors RIGHT JOIN Pairs ON Tutors.ID = Pairs.TID) RIGHT JOIN PairHours ON Pairs.UniqID = PairHours.PairHours) ON Students.ID = Pairs.SID
        //WHERE (((PairHours.DateMet) Between [Forms]![frmDateSelectionPairStatus]![BeginDate] And [Forms]![frmDateSelectionPairStatus]![EndDate]));
        public List<PairHoursViewModel> GetPairHours(int UniqID, int pageSize, int pageNum, string sort, ref int matchCount)
        {
            var query =
                from pair in Pairs
                where pair.UniqID == UniqID
                join pairHour in PairHours on pair.UniqID equals pairHour.PairHours into pairPairHours 
               
                //from p in pairPairHours.DefaultIfEmpty()
                //    where p.Activity != "prep time"
                from p in pairPairHours
                    where !(p.Activity.Contains("prep time"))

                select p;

            matchCount = query.Count();


            if (string.IsNullOrEmpty(sort) || sort.Equals("DateMet ASC"))
            {
                query = query.OrderBy(p => p.DateMet);
            }
            else if (sort.Equals("DateMet DESC"))
            {
                query = query.OrderByDescending(p => p.DateMet);
            }

            List<PairHoursViewModel> list = new List<PairHoursViewModel>();
            if (matchCount > 0)  //First() != null)
            {
                foreach (var pairHr in query)
                {
                    int activityId = GetActivityId(pairHr.Activity);
                    list.Add(new PairHoursViewModel
                    {
                        UniqID = pairHr.UniqID,
                        PairHours = pairHr.PairHours,
                        DateMet = pairHr.DateMet,
                        HoursMet = pairHr.HoursMet,
                        ActivityID = activityId,   //pair.Activity
                    });
                }
            }

            if (pageSize > 0)
            {
                IEnumerable<PairHoursViewModel> retList = list.AsEnumerable();
                return retList.Skip(pageNum).Take(pageSize).ToList();
            }
            else
                return list;
        }

        //******************** TUTOR *************************************************

        //Return only the results we want
        public List<Tutor> GetTutors(bool ActiveOnly, string searchTerm, int pageSize, int pageNum, bool byLastName)
        {
            return GetTutorsQuery(ActiveOnly, searchTerm, byLastName)
                .Skip(pageSize * (pageNum - 1))
                .Take(pageSize)
                .ToList();
        }

        //And the total count of records
        public int GetTutorsCount(bool ActiveOnly, string searchTerm, int pageSize, int pageNum)
        {
            return GetTutorsQuery(ActiveOnly, searchTerm, true)
                .Count();
        }

        public int TutorIdByRecIndex(int recIndex, bool activeOnly, bool byLastName)
        {
            Tutor[] list = GetTutorsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            if (cnt <= 0)
                return 0;

            if (recIndex <= 0)
                return list[0].ID;

            if (recIndex >= cnt)
            {
                return list[cnt - 1].ID;
            }

            return list[recIndex].ID; ;
        }

        public int FirstTutorId(int currTutorId, bool activeOnly, bool byLastName, ref int recIndex)
        {
            int tutorId = currTutorId;
            Tutor[] list = GetTutorsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            if (cnt > 0)
                tutorId = list[0].ID;
            recIndex = 1;

            return tutorId;
        }

        public int LastTutorId(int currTutorId, bool activeOnly, bool byLastName, ref int recIndex)
        {
            int tutorId = currTutorId;
            Tutor[] list = GetTutorsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            if (cnt > 0)
                tutorId = list[cnt - 1].ID;
            recIndex = cnt;

            return tutorId;
        }

        public int NextTutorId(int currTutorId, bool activeOnly, bool byLastName, ref int recIndex)
        {
            int nextTutorId = 0;
            Tutor[] list = GetTutorsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            if (cnt == 0)
            {
                recIndex = 0;
                return nextTutorId;
            }
            for (int currIndex = 0; currIndex < cnt; currIndex++)
            {
                if (list[currIndex].ID == currTutorId)
                {
                    int nextIndex = 0;
                    if (currIndex == cnt - 1)   // at end of list
                    {
                        nextTutorId = currTutorId;
                        nextIndex = currIndex;
                    }
                    else
                    {
                        nextTutorId = list[currIndex + 1].ID;
                        nextIndex = currIndex + 1;
                    }
                    recIndex = nextIndex + 1;
                    return nextTutorId;
                }
            }
            recIndex = 0;
            return list[recIndex].ID;
        }

        public int PrevTutorId(int currTutorId, bool activeOnly, bool byLastName, ref int recIndex)
        {
            int prevTutorId = 0;
            Tutor[] list = GetTutorsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            if (cnt == 0)
            {
                recIndex = 0;
                return prevTutorId;
            }

            for (int currIndex = 0; currIndex < cnt; currIndex++)
            {
                if (list[currIndex].ID == currTutorId)
                {
                    int nextIndex = 0;
                    if (currIndex == 0) // at top of list
                    {
                        prevTutorId = currTutorId;
                        nextIndex = currIndex;
                    }
                    else
                    {
                        prevTutorId = list[currIndex - 1].ID;
                        nextIndex = currIndex - 1;
                    }
                    recIndex = nextIndex + 1;
                    return prevTutorId;
                }
            }
            recIndex = 0;
            return list[recIndex].ID;
        }

        public Tutor GetTutor(int tutorId, bool activeOnly, bool byLastName, ref int recIndex)
        {
            Tutor[] list = GetTutorsQuery(activeOnly, "", byLastName).ToArray();
            int cnt = list.Count();
            for (int currIndex = 0; currIndex < cnt; currIndex++)
            {
                if (list[currIndex].ID == tutorId)
                {
                    recIndex = currIndex + 1;
                    return list[currIndex];
                }
            }
            return null;
        }

        //Our search term
        private IQueryable<Tutor> GetTutorsQuery(bool ActiveOnly, string searchTerm, bool byLastName)
        {
            searchTerm = searchTerm.ToLower();
            if (byLastName)
            {
                if (ActiveOnly)
                    return Tutors
                        .Where(
                            a =>
                            a.LastName.StartsWith(searchTerm) && a.Active == true
                        ).OrderBy(a => a.LastName).ThenBy(a => a.FirstName);
                else
                    return Tutors
                       .Where(
                           a =>
                           a.LastName.StartsWith(searchTerm)
                       ).OrderBy(a => a.LastName).ThenBy(a => a.FirstName);
            }
            else
            {
                if (ActiveOnly)
                    return Tutors
                    .Where(
                        a =>
                        a.FirstName.StartsWith(searchTerm) && a.Active == true
                    ).OrderBy(a => a.FirstName).ThenBy(a => a.LastName);
                else
                    return Tutors
                    .Where(
                        a =>
                        a.FirstName.StartsWith(searchTerm)
                    ).OrderBy(a => a.FirstName).ThenBy(a => a.LastName);
            }
        }

        public List<PairViewModel> GetMatchedStudentForTutor(int tutorID, int pageSize, int pageNum, string sort, ref int matchCount)
        {
            var tutorStatus = Tutors.Find(tutorID).Status;
            var pairs =
                from pair in Pairs
                where pair.TID == tutorID
                join student in Students on pair.SID equals student.ID //into pt 
                //from p in pt.DefaultIfEmpty() 
                select new
                {
                    TID = tutorID,
                    SID = pair.SID,
                    StudentLastName = student.LastName,
                    StudentFirstName = student.FirstName,
                    SStatus = student.Status,
                    TStatus = tutorStatus,
                    MatchDate = pair.MatchDate,
                    DissolveDate = pair.DissolveDate,
                    PairStatus = pair.PairStatus,
                    PairStatusDate = pair.PairStatusDate,
                    PairProgram = pair.PairProgram,
                    DateCreated = pair.DateCreated,
                    DateModified = pair.DateModified,
                    LastModifiedBy = pair.LastModifiedBy,
                    SSMA_TimeStamp = pair.SSMA_TimeStamp,
                    UniqID = pair.UniqID,
                    Comments = pair.Comments
                };

            matchCount = pairs.Count();

            // get the Total Hours Met for the Tutors.
            var query = pairs.GroupJoin(PairHours,
                                              p => p.UniqID,
                                              ph => ph.PairHours,
                                              (d, t) => new
                                              {
                                                  UniqID = d.UniqID,
                                                  SID = d.SID,
                                                  TID = d.TID,
                                                  StudentLName = d.StudentLastName,
                                                  StudentFName = d.StudentFirstName,
                                                  MatchDate = d.MatchDate,
                                                  PairStatus = d.PairStatus,
                                                  DissolveDate = d.DissolveDate,
                                                  PairStatusDate = d.PairStatusDate,
                                                  PairProgram = d.PairProgram,
                                                  DateCreated = d.DateCreated,
                                                  DateModified = d.DateModified,
                                                  LastModifiedBy = d.LastModifiedBy,
                                                  SSMA_TimeStamp = d.SSMA_TimeStamp,
                                                  TStatus = d.TStatus,
                                                  SStatus = d.SStatus,
                                                  Comments = d.Comments,
                                                  TotalHoursMet = t.Sum(x => x.HoursMet)
                                              });

            if (string.IsNullOrEmpty(sort) || sort.Equals("DateCreated ASC"))
            {
                query = query.OrderBy(p => p.DateCreated);
            }
            else if (sort.Equals("DateCreated DESC"))
            {
                query = query.OrderByDescending(p => p.DateCreated);
            }

            // consolidate results.
            List<PairViewModel> list = new List<PairViewModel>();
            foreach (var pair in query)
            {
                int pairStatusId = GetStatusId(pair.PairStatus);
                int tStatusId = GetStatusId(pair.TStatus);
                int sStatusId = GetStatusId(pair.SStatus);
                list.Add(new PairViewModel
                {
                    UniqID = pair.UniqID,
                    SID = pair.SID,
                    TID = pair.TID,
                    StudentFName = pair.StudentFName,
                    StudentLName = pair.StudentLName,
                    MatchDate = pair.MatchDate,
                    DissolveDate = pair.DissolveDate,
                    PairStatusID = pairStatusId,
                    PairStatusDate = pair.PairStatusDate,
                    PairProgram = pair.PairProgram,
                    DateCreated = pair.DateCreated,
                    DateModified = pair.DateModified,
                    LastModifiedBy = pair.LastModifiedBy,
                    SSMA_TimeStamp = pair.SSMA_TimeStamp,
                    TStatusID = tStatusId,
                    SStatusID = sStatusId,
                    Comments = pair.Comments,
                    TotalHoursMet = pair.TotalHoursMet
                });
            }

            if (pageSize > 0)
            {
                IEnumerable<PairViewModel> retList = list.AsEnumerable();
                return retList.Skip(pageNum).Take(pageSize).ToList();
            }
            else
                return list;
        }

        public List<TutorCommentsViewModel> GetTutorComments(int id)
        {
            var query = from c in TutorComments
                        where c.ID == id
                        select c;

            if (query.Count() == 0)
                return new List<TutorCommentsViewModel>();

            List<TutorCommentsViewModel> list = new List<TutorCommentsViewModel>();
            foreach (var item in query)
            {
                list.Add(new TutorCommentsViewModel
                {
                    ID = item.ID,
                    CommentDate = item.CommentDate,
                    Comment = item.Comment,
                    SSMA_TimeStamp = item.SSMA_TimeStamp
                });
            }

            return list;
        }

        public List<TutorFollowUpViewModel> GetTutorFollowUps(int id)
        {
            var query = from c in TutorFollowUps
                        where c.ID == id
                        select c;

            if (query.Count() == 0)
                return new List<TutorFollowUpViewModel>();

            List<TutorFollowUpViewModel> list = new List<TutorFollowUpViewModel>();
            foreach (var item in query)
            {
                list.Add(new TutorFollowUpViewModel
                {
                    New = false,        // not a new FollowUp record
                    UniqID = item.UniqID,
                    ID = item.ID,
                    FollowUpDate = item.FollowUpDate,
                    FollowUpDesc = item.FollowUpDesc,
                    DateCreated = item.DateCreated,
                    DateModified = item.DateModified,
                    LastModifiedBy = item.LastModifiedBy
                });
            }

            return list;
        }

        // ************************************************************************************************
        // All Pairs
        public int PairIdByRecIndex(int recIndex)
        {
            PairViewModel[] list = GetAllPairs().ToArray();
            int cnt = list.Count();
            if (cnt <= 0)
                return 0;

            if (recIndex <= 0)
                return list[0].UniqID;

            if (recIndex >= cnt)
            {
                return list[cnt - 1].UniqID;
            }

            return list[recIndex].UniqID;
        }

        public int FirstPairId(int currPairId, ref int recIndex)
        {
            int Id = currPairId;
            PairViewModel[] list = GetAllPairs().ToArray();
            int cnt = list.Count();
            if (cnt > 0)
                Id = list[0].UniqID;
            recIndex = 1;

            return Id;
        }

        public int LastPairId(int currPairId, ref int recIndex)
        {
            int Id = currPairId;
            PairViewModel[] list = GetAllPairs().ToArray();
            int cnt = list.Count();
            if (cnt > 0)
                Id = list[cnt - 1].UniqID;
            recIndex = cnt;

            return Id;
        }

        public int NextPairId(int currPairId, ref int recIndex)
        {
            int Id = 0;
            PairViewModel[] list = GetAllPairs().ToArray();
            int cnt = list.Count();
            if (cnt == 0)
            {
                recIndex = 0;
                return Id;
            }
            for (int currIndex = 0; currIndex < cnt; currIndex++)
            {
                if (list[currIndex].UniqID == currPairId)
                {
                    int nextIndex = 0;
                    if (currIndex == cnt - 1)   // at end of list
                    {
                        Id = currPairId;
                        nextIndex = currIndex;
                    }
                    else
                    {
                        Id = list[currIndex + 1].UniqID;
                        nextIndex = currIndex + 1;
                    }
                    recIndex = nextIndex + 1;
                    return Id;
                }
            }
            recIndex = 0;
            return list[recIndex].UniqID;
        }

        public int PrevPairId(int currPairId, ref int recIndex)
        {
            int Id = 0;
            PairViewModel[] list = GetAllPairs().ToArray();
            int cnt = list.Count();
            if (cnt == 0)
            {
                recIndex = 0;
                return Id;
            }

            for (int currIndex = 0; currIndex < cnt; currIndex++)
            {
                if (list[currIndex].UniqID == currPairId)
                {
                    int nextIndex = 0;
                    if (currIndex == 0) // at top of list
                    {
                        Id = currPairId;
                        nextIndex = currIndex;
                    }
                    else
                    {
                        Id = list[currIndex - 1].UniqID;
                        nextIndex = currIndex - 1;
                    }
                    recIndex = nextIndex + 1;
                    return Id;
                }
            }
            recIndex = 0;
            return list[recIndex].UniqID;
        }

        public PairViewModel GetPair(int pairId, ref int recIndex)
        {
            PairViewModel[] list = GetAllPairs().ToArray();
            int cnt = list.Count();
            for (int currIndex = 0; currIndex < cnt; currIndex++)
            {
                if (list[currIndex].UniqID == pairId)
                {
                    recIndex = currIndex + 1;

                    list[currIndex].TotalHoursMet = GetTotalHoursMet(pairId);
                    return list[currIndex];
                }
            }
            return null;
        }

        // ********************************************************************************************************
        public static string GetActivity(int activityId)
        {
            switch (activityId)
            {
                case 1:
                    return "Prep Time";
                case 2:
                    return "Travel Time";
                case 3:
                    return "Tutoring";
                case 0:
                default:
                    return "---";
            }
        }
        private int GetActivityId(string activity)
        {
            if (activity == null || activity == "---")
                    return 0;
            if (activity.Equals("Prep Time", StringComparison.OrdinalIgnoreCase))
                return 1;
            else if (activity.Equals("Travel Time", StringComparison.OrdinalIgnoreCase))
                return 2;
            else if (activity.Equals("Tutoring", StringComparison.OrdinalIgnoreCase))
                return 3;
            return 0;
        }

        public static string GetStatus(int statusId)
        {
            //switch (statusId)
            //{
            //    case 1:
            //        return "Dissolved";
            //    case 2:
            //        return "Inactive";
            //    case 3:
            //        return "Left";
            //    case 4:
            //        return "Prospective";
            //    case 5:
            //        return "Sabbatical";
            //    case 6:
            //        return "Waiting";
            //    case 0:
            //    default:
            //        return "Active";
            //}
            switch (statusId)
            {
                case 1:
                    return "Active";
                case 2:
                    return "Dissolved";
                case 3:
                    return "Inactive";
                case 4:
                    return "Left";
                case 5:
                    return "Prospective";
                case 6:
                    return "Sabbatical";
                case 7:
                    return "Waiting";
                case 0:
                default:
                    return "---";
            }
        }

        private int GetStatusId(string status)
        {
            if (status == null || status == "" || status == "---")
                return 0;

            if (status.Equals("Active", StringComparison.OrdinalIgnoreCase))
                return 1;
            else if (status.Equals("Dissolved", StringComparison.OrdinalIgnoreCase))
                return 2;
            else if (status.Equals("Inactive", StringComparison.OrdinalIgnoreCase))
                return 3;
            else if (status.Equals("Left", StringComparison.OrdinalIgnoreCase))
                return 4;
            else if (status.Equals("Prospective", StringComparison.OrdinalIgnoreCase))
                return 5;
            else if (status.Equals("Sabbatical", StringComparison.OrdinalIgnoreCase))
                return 6;
            else if (status.Equals("Waiting", StringComparison.OrdinalIgnoreCase))
                return 7;
            return 0;

            // if (status.Equals("Active", StringComparison.OrdinalIgnoreCase))
           //     return 0;
           // else if (status.Equals("Dissolved", StringComparison.OrdinalIgnoreCase))
           //     return 1;
           // else if (status.Equals("Inactive", StringComparison.OrdinalIgnoreCase))
           //     return 2;
           // else if (status.Equals("Left", StringComparison.OrdinalIgnoreCase))
           //     return 3;
           // else if (status.Equals("Prospective", StringComparison.OrdinalIgnoreCase))
           //     return 4;
           // else if (status.Equals("Sabbatical", StringComparison.OrdinalIgnoreCase))
           //     return 5;
           // else if (status.Equals("Waiting", StringComparison.OrdinalIgnoreCase))
           //     return 6;
           //return 0;
        }

        public static string GetGender(int genderId)
        {
            switch (genderId)
            {
                case 1:
                    return "Female";
                case 2:
                    return "Male";
                case 0:
                default:
                    return "---";
            }
        }
        private int GetGenderId(string gender)
        {
            if (gender == null || gender.Equals("---"))
                return 0;
            if (gender.Equals("Female", StringComparison.OrdinalIgnoreCase))
                return 1;
            else if (gender.Equals("Male", StringComparison.OrdinalIgnoreCase))
                return 2;
            return 0;
        }

        public static string GetEthnicity(int ethnicityId)
        {
            switch (ethnicityId)
            {
                case 1:
                    return "African";
                case 2:
                    return "Algerian";
                case 3:
                    return "Asian";
                case 4:
                    return "Black";
                case 5:
                    return "Ethiopian";
                case 6:
                    return "Hispanic";
                case 7:
                    return "Native American";
                case 8:
                    return "Other";
                case 9:
                    return "Pacific Islander";
                case 10:
                    return "Unknown";
                case 11:
                    return "White";
                case 0:
                default:
                    return "---";
            }
        }
        private int GetEthnicityId(string ethnicity)
        {
            if (ethnicity == null || ethnicity.Equals("---"))
                return 0;
            if (ethnicity.Equals("African", StringComparison.OrdinalIgnoreCase))
                return 1;
            else if (ethnicity.Equals("Algerian", StringComparison.OrdinalIgnoreCase))
                return 2;
            else if (ethnicity.Equals("Asian", StringComparison.OrdinalIgnoreCase))
                return 3;
            else if (ethnicity.Equals("Black", StringComparison.OrdinalIgnoreCase))
                return 4;
            else if (ethnicity.Equals("Ethiopian", StringComparison.OrdinalIgnoreCase))
                return 5;
            else if (ethnicity.Equals("Hispanic", StringComparison.OrdinalIgnoreCase))
                return 6;
            else if (ethnicity.Equals("Native American", StringComparison.OrdinalIgnoreCase))
                return 7;
            else if (ethnicity.Equals("Other", StringComparison.OrdinalIgnoreCase))
                return 8;
            else if (ethnicity.Equals("Pacific Islander", StringComparison.OrdinalIgnoreCase))
                return 9;
            else if (ethnicity.Equals("Unknown", StringComparison.OrdinalIgnoreCase))
                return 10;
            else if (ethnicity.Equals("White", StringComparison.OrdinalIgnoreCase))
                return 11;
            return 0;
        }

        public static string GetChildRelationship(int Id)
        {
            switch (Id)
            {
                case 1:
                    return "Custodial";
                case 2:
                    return "Distant";
                case 3:
                    return "Parent";
                case 0:
                default:
                    return "---";
            }
        }
        private int GetChildRelationshipId(string relatioship)
        {
            if (relatioship == null || relatioship.Equals("---"))
                return 0;
            if (relatioship.Equals("Custodial", StringComparison.OrdinalIgnoreCase))
                return 1;
            else if (relatioship.Equals("Distant", StringComparison.OrdinalIgnoreCase))
                return 2;
            else if (relatioship.Equals("Parent", StringComparison.OrdinalIgnoreCase))
                return 3;
            return 0;
        }

        private double GetTotalHoursMet(int pairId)
        {
            var query =
                from pairHour in PairHours
                where pairHour.PairHours == pairId && !(pairHour.Activity.Contains("prep time"))
                select pairHour;
            if (query.Count() == 0)
                return 0;

            return query.Sum(p => (double)p.HoursMet);
        }


        //SELECT [FirstName] & " " & [LastName] AS Name, [HomeAreaCode] & " " & [HomePhone] AS Home, [WorkAreaCode] & " " & [WorkPhone] AS [Work], StudentFollowUp.FollowUpDate, StudentFollowUp.FollowUpDesc, Students.ID, StudentFollowUp.LastModifiedBy, StudentFollowUp.UniqID
        //FROM Students INNER JOIN StudentFollowUp ON Students.ID = StudentFollowUp.ID
        //WHERE (((StudentFollowUp.FollowUpDate)=Date()))
        //ORDER BY Students.LastName;

        public DbSet<ChildRelationship> ChildRelationships { get; set; }
        public DbSet<Class> Classes { get; set; }
        public DbSet<Class___save> Class___save { get; set; }
        public DbSet<Class_12_09_Export> Class_12_09_Export { get; set; }
        public DbSet<ClassAttendanceDate> ClassAttendanceDates { get; set; }
        public DbSet<ClassRegistrationHistory> ClassRegistrationHistories { get; set; }
        public DbSet<ClassSignUp> ClassSignUps { get; set; }
        public DbSet<Computer> Computers { get; set; }
        public DbSet<ComputerHour> ComputerHours { get; set; }
        public DbSet<Contact> Contacts { get; set; }
        public DbSet<DonorHistory> DonorHistories { get; set; }
        public DbSet<Donor> Donors { get; set; }
        public DbSet<EventDonationHistory> EventDonationHistories { get; set; }
        public DbSet<EventRegistrationHistory> EventRegistrationHistories { get; set; }
        public DbSet<Event> Events { get; set; }
        public DbSet<Friend> Friends { get; set; }
        public DbSet<Label> Labels { get; set; }
        public DbSet<PairHour> PairHours { get; set; }
        public DbSet<Pair> Pairs { get; set; }
        public DbSet<Pairs_export_12_09> Pairs_export_12_09 { get; set; }
        public DbSet<RolesAndGoal> RolesAndGoals { get; set; }
        public DbSet<Sheet3> Sheet3 { get; set; }
        public DbSet<SmallGroupBuilding> SmallGroupBuildings { get; set; }
        public DbSet<SmallGroupClassroom> SmallGroupClassrooms { get; set; }
        public DbSet<SmallGroupClassStatu> SmallGroupClassStatus { get; set; }
        public DbSet<SmallGroupKeyword> SmallGroupKeywords { get; set; }
        public DbSet<SmallGroupLocation> SmallGroupLocations { get; set; }
        public DbSet<SmallGroupProgram> SmallGroupPrograms { get; set; }
        public DbSet<SmallGroupRegistrationHistory> SmallGroupRegistrationHistories { get; set; }
        public DbSet<SmallGroupRegistrationHour> SmallGroupRegistrationHours { get; set; }
        public DbSet<SmallGroup> SmallGroups { get; set; }
        public DbSet<SmallGroupSemester> SmallGroupSemesters { get; set; }
        public DbSet<SmallGroupTeacher> SmallGroupTeachers { get; set; }
        public DbSet<SmallGroupTime> SmallGroupTimes { get; set; }
        public DbSet<Student_Export_12_09> Student_Export_12_09 { get; set; }
        public DbSet<StudentAccomplishment> StudentAccomplishments { get; set; }
        public DbSet<StudentChildren> StudentChildrens { get; set; }
        public DbSet<StudentComment> StudentComments { get; set; }
        public DbSet<StudentContact> StudentContacts { get; set; }
        public DbSet<StudentFollowUp> StudentFollowUps { get; set; }
        public DbSet<StudentQuarterlyStartingNum> StudentQuarterlyStartingNums { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<tblAuditTrail> tblAuditTrails { get; set; }
        public DbSet<tblAuditTrailStudentStatu> tblAuditTrailStudentStatus { get; set; }
        public DbSet<tblAuditTrailTutorStatu> tblAuditTrailTutorStatus { get; set; }
        public DbSet<tblStatusHistory> tblStatusHistories { get; set; }
        public DbSet<Tutor_Export_12_09> Tutor_Export_12_09 { get; set; }
        public DbSet<TutorComment> TutorComments { get; set; }
        public DbSet<TutorContact> TutorContacts { get; set; }
        public DbSet<TutorFollowUp> TutorFollowUps { get; set; }
        public DbSet<TutorMatchHistory> TutorMatchHistories { get; set; }
        public DbSet<TutorQuarterlyStartingNum> TutorQuarterlyStartingNums { get; set; }
        public DbSet<Tutor> Tutors { get; set; }
        public DbSet<VolunteerHistory> VolunteerHistories { get; set; }
        public DbSet<VolunteerHour> VolunteerHours { get; set; }
        public DbSet<Volunteer> Volunteers { get; set; }
        public DbSet<WorkshopRegistrationHistory> WorkshopRegistrationHistories { get; set; }
        public DbSet<Workshop> Workshops { get; set; }
        public DbSet<Contacts_Query> Contacts_Queries { get; set; }
        public DbSet<Contacts_Query_Query> Contacts_Query_Queries { get; set; }
        public DbSet<Contacts_Query1> Contacts_Query1 { get; set; }
        public DbSet<Contacts_Query10> Contacts_Query10 { get; set; }
        public DbSet<Contacts_Query11> Contacts_Query11 { get; set; }
        public DbSet<Contacts_Query12> Contacts_Query12 { get; set; }
        public DbSet<Contacts_Query13> Contacts_Query13 { get; set; }
        public DbSet<Contacts_Query14> Contacts_Query14 { get; set; }
        public DbSet<Contacts_Query2> Contacts_Query2 { get; set; }
        public DbSet<Contacts_Query3> Contacts_Query3 { get; set; }
        public DbSet<Contacts_Query4> Contacts_Query4 { get; set; }
        public DbSet<Contacts_Query5> Contacts_Query5 { get; set; }
        public DbSet<Contacts_Query6> Contacts_Query6 { get; set; }
        public DbSet<Contacts_Query7> Contacts_Query7 { get; set; }
        public DbSet<Contacts_Query8> Contacts_Query8 { get; set; }
        public DbSet<Contacts_Query9> Contacts_Query9 { get; set; }
        public DbSet<qry2008Learners> qry2008Learners { get; set; }
        public DbSet<qryActiveFFLPair> qryActiveFFLPairs { get; set; }
        public DbSet<qryActiveFFLStudentReport> qryActiveFFLStudentReports { get; set; }
        public DbSet<qryAssessmentFollowUp> qryAssessmentFollowUps { get; set; }
        public DbSet<qryClass> qryClasses { get; set; }
        public DbSet<qryClassAttendanceDate> qryClassAttendanceDates { get; set; }
        public DbSet<qryClassAttendanceList> qryClassAttendanceLists { get; set; }
        public DbSet<qryClassRegistrationHistory> qryClassRegistrationHistories { get; set; }
        public DbSet<qryClassSignUp> qryClassSignUps { get; set; }
        public DbSet<qryComputer> qryComputers { get; set; }
        public DbSet<qryComputerLab> qryComputerLabs { get; set; }
        public DbSet<qryContactFollowUp> qryContactFollowUps { get; set; }
        public DbSet<qryContactFollowUpReport> qryContactFollowUpReports { get; set; }
        public DbSet<qryContact> qryContacts { get; set; }
        public DbSet<qryContacts_Query> qryContacts_Queries { get; set; }
        public DbSet<qryDonorFollowUp> qryDonorFollowUps { get; set; }
        public DbSet<qryDonorHistory> qryDonorHistories { get; set; }
        public DbSet<qryDonorHistoryFollowUp> qryDonorHistoryFollowUps { get; set; }
        public DbSet<qryDonor> qryDonors { get; set; }
        public DbSet<qryEventDonationHistory> qryEventDonationHistories { get; set; }
        public DbSet<qryEventDonation> qryEventDonations { get; set; }
        public DbSet<qryEventDonationTotal> qryEventDonationTotals { get; set; }
        public DbSet<qryEventRegistrationHistory> qryEventRegistrationHistories { get; set; }
        public DbSet<qryEvent> qryEvents { get; set; }
        public DbSet<qryFriend> qryFriends { get; set; }
        public DbSet<qryFriendsFollowUp> qryFriendsFollowUps { get; set; }
        public DbSet<qryLabel> qryLabels { get; set; }
        public DbSet<qryPair> qryPairs { get; set; }
        public DbSet<qryPairsMetMoreThan12Hours2> qryPairsMetMoreThan12Hours2 { get; set; }
        public DbSet<qryPairsMoreThan12Hours> qryPairsMoreThan12Hours { get; set; }
        public DbSet<qryPairsStudentsMetWithTutorsLessThan12HoursSum> qryPairsStudentsMetWithTutorsLessThan12HoursSum { get; set; }
        public DbSet<qryPairsStudentsMetWithTutorsMoreThan12HoursSum> qryPairsStudentsMetWithTutorsMoreThan12HoursSum { get; set; }
        public DbSet<qryPairsThi> qryPairsThis { get; set; }
        public DbSet<qryPairsTutorsMetWithStudentsLessThan12HoursSum> qryPairsTutorsMetWithStudentsLessThan12HoursSum { get; set; }
        public DbSet<qryPairsTutorsMetWithStudentsMoreThan12HoursSum> qryPairsTutorsMetWithStudentsMoreThan12HoursSum { get; set; }
        public DbSet<qryPortfolioReport> qryPortfolioReports { get; set; }
        public DbSet<qrySmallGroupRegistrationHistory> qrySmallGroupRegistrationHistories { get; set; }
        public DbSet<qrySmallGroup> qrySmallGroups { get; set; }
        public DbSet<qryStudentAccomplishment> qryStudentAccomplishments { get; set; }
        public DbSet<qryStudentBDay> qryStudentBDays { get; set; }
        public DbSet<qryStudentComment> qryStudentComments { get; set; }
        public DbSet<qryStudentFollowUp> qryStudentFollowUps { get; set; }
        public DbSet<qryStudentFollowUpContinuou> qryStudentFollowUpContinuous { get; set; }
        public DbSet<qryStudentFollowUpReport> qryStudentFollowUpReports { get; set; }
        public DbSet<qryStudentFollowUpToday> qryStudentFollowUpTodays { get; set; }
        public DbSet<qryStudentMatchHistoryTutor> qryStudentMatchHistoryTutors { get; set; }
        public DbSet<qryStudent> qryStudents { get; set; }
        public DbSet<qryStudentsActiveMoreThan1Year> qryStudentsActiveMoreThan1Year { get; set; }
        public DbSet<qryStudentsActivePhoneList> qryStudentsActivePhoneLists { get; set; }
        public DbSet<qryStudentsInActivePhoneList> qryStudentsInActivePhoneLists { get; set; }
        public DbSet<qryStudentStatusHistory> qryStudentStatusHistories { get; set; }
        public DbSet<qryStudentStatusHistory_Query> qryStudentStatusHistory_Queries { get; set; }
        public DbSet<qryTutorBDay> qryTutorBDays { get; set; }
        public DbSet<qryTutorComment> qryTutorComments { get; set; }
        public DbSet<qryTutorContactChoice> qryTutorContactChoices { get; set; }
        public DbSet<qryTutorFollowUp> qryTutorFollowUps { get; set; }
        public DbSet<qryTutorFollowUpContinuou> qryTutorFollowUpContinuous { get; set; }
        public DbSet<qryTutorFollowUpReport> qryTutorFollowUpReports { get; set; }
        public DbSet<qryTutorFollowUpToday> qryTutorFollowUpTodays { get; set; }
        public DbSet<qryTutorInActivePhoneList> qryTutorInActivePhoneLists { get; set; }
        public DbSet<qryTutorMatchHistoryStudent> qryTutorMatchHistoryStudents { get; set; }
        public DbSet<qryTutor> qryTutors { get; set; }
        public DbSet<qryTutorsActivePhoneList> qryTutorsActivePhoneLists { get; set; }
        public DbSet<qryTutorStatusHistory> qryTutorStatusHistories { get; set; }
        public DbSet<qryVolunteerFollowUp> qryVolunteerFollowUps { get; set; }
        public DbSet<qryVolunteerHistory> qryVolunteerHistories { get; set; }
        public DbSet<qryVolunteerHour> qryVolunteerHours { get; set; }
        public DbSet<qryVolunteer> qryVolunteers { get; set; }
        public DbSet<qryWkShop> qryWkShops { get; set; }
        public DbSet<qryWkShopsHistory> qryWkShopsHistories { get; set; }
        public DbSet<qryWorkshopRegistrationFollowUp> qryWorkshopRegistrationFollowUps { get; set; }
        public DbSet<qryWorkshopRegistrationHistory> qryWorkshopRegistrationHistories { get; set; }
        public DbSet<qryWorkshopRegistrationHistoryALL> qryWorkshopRegistrationHistoryALLs { get; set; }
        public DbSet<qryWorkshop> qryWorkshops { get; set; }
        public DbSet<qryWorkstopRegistrationHistoryNEW> qryWorkstopRegistrationHistoryNEWs { get; set; }
        public DbSet<Query2> Query2 { get; set; }
        public DbSet<StudentContact_Query> StudentContact_Queries { get; set; }
        public DbSet<StudentsIn94555> StudentsIn94555 { get; set; }
    }
}
